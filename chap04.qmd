---
title: "1st Order Spatial Point Patterns Analysis Methods"
date: "January 8, 2023"
date-modified: "last-modified"
format: html
execute:
  echo: true
  eval: true
  message: false
  warning: false
  freeze: true
editor: visual
---

## Overview

Spatial Point Pattern Analysis is the evaluation of the pattern or distribution, of a set of points on a surface. The point can be location of:

-   events such as crime, traffic accident and disease onset, or
-   business services (coffee and fastfood outlets) or facilities such as childcare and eldercare.

Using appropriate functions of [spatstat](https://cran.r-project.org/web/packages/spatstat/), this hands-on exercise aims to discover the spatial point processes of childecare centres in Singapore.

The specific questions we would like to answer are as follows:

-   are the childcare centres in Singapore randomly distributed throughout the country?\
-   if the answer is not, then the next logical question is where are the locations with higher concentration of childcare centres?

## The data

To provide answers to the questions above, three data sets will be used. They are:

-   `CHILDCARE`, a point feature data providing both location and attribute information of childcare centres. It was downloaded from data.gov.sg and is in geojson format.
-   `MPSZ2019`, a polygon feature data providing information of URA 2019 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from data.gov.sg.

## Installing and Loading the R packages

In this hands-on exercise, five R packages will be used, they are:

-   [**sf**](https://r-spatial.github.io/sf/), a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.
-   [**spatstat**](https://spatstat.org/), which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.
-   [**terra**](https://rspatial.github.io/terra/index.html): The terra package is a modern spatial data analysis package designed to replace the raster package. It offers improved speed and efficiency when working with both raster and vector spatial data, particularly with large datasets. terra provides functionalities for creating, reading, manipulating, and writing raster and vector data, and it's built on top of GDAL and PROJ libraries for enhanced performance. In this hands-on exercise, it will be used to convert image output generate by spatstat into terra format.
-   [**maptools**](https://cran.r-project.org/web/packages/maptools/index.html) which provides a set of tools for manipulating geographic data. In this hands-on exercise, we mainly use it to convert *Spatial* objects into *ppp* format of **spatstat**.
-   [**tmap**](https://cran.r-project.org/web/packages/tmap/index.html) which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API.

Use the code chunk below to install and launch the five R packages.

```{r}
pacman::p_load(sf, terra, spatstat,
               maptools, tmap, tidyverse)
```

## Spatial Data Wrangling

### Importing the spatial data

In this section, [`st_read()`](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package will be used to import these two geospatial data sets into R.

To import the childcare services data, the code chunk below will be used.

```{r}
childcare_sf <- st_read("chap04/data/ChildCareServices.geojson") %>% 
  st_transform(crs = 3414)
```

::: callout-note
Note that `st_transform()` is used in the code chunk above to re-project the geospatial data to SVY21 projected coordinates system. 
:::

To import the planning subzone boundary layer,  the code chunk below will be used.

```{r}
mpsz_sf <- st_read(dsn = "chap04/data",
                   layer="MPSZ2019")
```

::: callout-note
Although `st_read()` is used to import both data sets but the arguments used are not the same.  This is because the planning subzone data is stored in ESRI shapefile format.
:::

Before we can use these data for analysis, it is important for us to ensure that they are projected in same projection system.

::: callout-note
####  DIY
Using the appropriate **sf** function you learned in Hands-on Exercise 2, retrieve the referencing system information of these geospatial data.
:::

```{r}
#| echo: false
st_crs(childcare_sf)
```

```{r}
#| echo: false
st_crs(mpsz_sf)
```

::: callout-caution
Notice that `childcare_sf` is not in projected coordinates system.
:::

::: callout-note
#### DIY
Using the method you learned in Lesson 2, transform the projection of *childcare_sf* into SVY21.
:::

### Mapping the geospatial data sets

After checking the referencing system of each geospatial data data frame, it is also useful for us to plot a map to show their spatial patterns.

::: callout-note
#### DIY
Using the mapping methods you learned in Hands-on Exercise 3, prepare a map as shown below.
:::

```{r}
#| echo: false
tm_shape(mpsz_sf) +
  tm_polygons() +
tm_shape(childcare_sf)+
  tm_dots()
```

Notice that all the geospatial layers are within the same map extend. This shows that their referencing system and coordinate values are referred to similar spatial context. This is very important in any geospatial analysis.

Alternatively, we can also prepare a interactive point symbol map by using the code chunk below.

```{r}
tmap_mode('view')
tm_shape(childcare_sf)+
  tm_dots()
tmap_mode('plot')
```

::: callout-note
Notice that at the interactive mode, **tmap** is using [**leaflet for R**](https://rstudio.github.io/leaflet/) API. The advantage of this interactive pin map is it allows us to navigate and zoom around the map freely. We can also query the information of each simple feature (i.e. the point) by clicking of them. Last but not least, you can also change the background of the internet map layer. Currently, three internet map layers are provided. They are: ESRI.WorldGrayCanvas, OpenStreetMap, and ESRI.WorldTopoMap. The default is ESRI.WorldGrayCanvas.
:::

::: callout-warning
Always remember to switch back to plot mode after the interactive map. This is because, each interactive mode will consume a connection. You should also avoid displaying ecessive numbers of interactive maps (i.e. not more than 10) in one RMarkdown document when publish on Netlify.
:::

## Geospatial Data wrangling

spatstat relies on its own specific data structures like **ppp** (planar point pattern) for point data and **owin** for observation windows.  In this section, you will learn how to convert sf (Simple Features) objects into spatstat ppp and owin object. 

### Converting sf data frames to ppp class

**spatstat** requires the point event data in ***ppp*** object form.   The code chunk below uses [`as.ppp()`] of **spatstat** package to convert *childcare_sf* to ppp format.  

```{r}
childcare_ppp <- as.ppp(childcare_sf)
```

Next, class() of Base R will be used to verify the object class of childcare_ppp.

```{r}
class(childcare_ppp)
```

Great, it is in ppp object class!

You can take a quick look at the summary statistics of the newly converted ppp object by using the code chunk below.

```{r}
summary(childcare_ppp)
```

### Creating ***owin*** object

When analysing spatial point patterns, it is a good practice to confine the analysis with a geographical area like Singapore boundary. In **spatstat**, an object called ***owin*** is specially designed to represent this polygonal region.

The code chunk below, `as.owin()` of spatstat is used to covert *mpsz_sf* into owin object of **spatstat**.

```{r}
sg_owin <- as.owin(mpsz_sf)
```

Again, `class()` will be used to verify the object class of *sg_owin*.

```{r}
class(sg_owin)
```

The result above confirmed that *sg_owin* is indeed in owin object.

*sg_owin* object can be displayed by using `plot()` function.

```{r}
plot(sg_owin)
```

and `summary()` function of Base R.

```{r}
summary(sg_owin)
```

### Combining point events object and owin object

In this last step of geospatial data wrangling, we will extract childcare events that are located within Singapore by using the code chunk below.

```{r}
childcareSG_ppp = childcare_ppp[sg_owin]
```

The output object combined both the point and polygon feature in one ppp object class as shown below.

```{r eval=FALSE}
summary(childcareSG_ppp)
```

> DIY: Using the method you learned in previous exercise, plot the newly derived childcareSG_ppp as shown below.

```{r echo=FALSE}
plot(childcareSG_ppp)
```

## First-order Spatial Point Patterns Analysis

In this section, you will learn how to perform first-order SPPA by using **spatstat** package. The hands-on exercise will focus on:

-   deriving **kernel density estimation (KDE)** layer for visualising and exploring the intensity of point processes,
-   performing **Confirmatory Spatial Point Patterns Analysis** by using **Nearest Neighbour** statistics.

### Kernel Density Estimation

In this section, you will learn how to compute the kernel density estimation (KDE) of childcare services in Singapore.

#### Computing kernel density estimation using automatic bandwidth selection method

The code chunk below computes a kernel density by using the following configurations of [*density()*](https://rdrr.io/cran/spatstat/man/density.ppp.html) of **spatstat**:

-   [*bw.diggle()*](https://rdrr.io/cran/spatstat/man/bw.diggle.html) automatic bandwidth selection method. Other recommended methods are [*bw.CvL()*](https://rdrr.io/cran/spatstat/man/bw.CvL.html), [*bw.scott()*](https://rdrr.io/cran/spatstat/man/bw.scott.html) or [*bw.ppl()*](https://rdrr.io/cran/spatstat/man/bw.ppl.html).\
-   The smoothing kernel used is *gaussian*, which is the default. Other smoothing methods are: "epanechnikov", "quartic" or "disc".\
-   The intensity estimate is corrected for edge effect bias by using method described by Jones (1993) and Diggle (2010, equation 18.9). The default is *FALSE*.

```{r}
kde_childcareSG_bw <- density(childcareSG_ppp,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian") 
```

::: callout-node
The output of `density()` of spatstat is an **im** class, represents a two-dimensional pixel image. It's a class used to store and manipulate raster data, where the spatial domain is divided into a grid of rectangular pixels. Each pixel has an associated value, which can be numerical or a factor.

The *plot()* function of Base R is then used to display the kernel density derived.

```{r}
plot(kde_childcareSG_bw)
```

```{r}
summary(kde_childcareSG_bw)
```

The density values of the output range from 0 to 0.00003727443 which is way too small to comprehend. This is because the default unit of measurement of svy21 is in meter. As a result, the density values computed is in "number of points per square meter".

Before we move on to next section, it is good to know that you can retrieve the bandwidth used to compute the kde layer by using the code chunk below.

```{r}
bw <- bw.diggle(childcareSG_ppp)
bw
```

#### Rescalling KDE values

In the code chunk below, *rescale.ppp()* is used to covert the unit of measurement from meter to kilometer.

```{r}
childcareSG_ppp.km <- rescale.ppp(childcareSG_ppp, 1000, "km")
```

Now, we can re-run `density()` using the resale data set and plot the output kde map.

```{r}
kde_childcareSG.bw <- density(childcareSG_ppp.km,
                              sigma=bw.diggle,
                              edge=TRUE,
                              kernel="gaussian")
```

Next, plot() is used to plot the kde object as shown below.

```{r}
plot(kde_childcareSG.bw)
```

Notice that output image looks identical to the earlier version, the only changes in the data values (refer to the legend).

### Working with different automatic badwidth methods

Beside *bw.diggle()*, there are three other **spatstat** functions can be used to determine the bandwidth, they are: *bw.CvL()*, *bw.scott()*, and *bw.ppl()*.

Let us take a look at the bandwidth return by these automatic bandwidth calculation methods by using the code chunk below.

```{r}
bw.CvL(childcareSG_ppp.km)
```

```{r}
bw.scott(childcareSG_ppp.km)
```

```{r}
bw.ppl(childcareSG_ppp.km)
```

```{r}
bw.diggle(childcareSG_ppp.km)
```

Baddeley et. (2016) suggested the use of the *bw.ppl()* algorithm because past experience shown that it tends to produce the more appropriate values when the pattern consists predominantly of tight clusters. But they also insist that if the purpose of once study is to detect a single tight cluster in the midst of random noise then the *bw.diggle()* method seems to work best.

The code chunk beow will be used to compare the output of using *bw.diggle* and *bw.ppl* methods.

```{r fig.width=16, fig.height=6}
kde_childcareSG.ppl <- density(childcareSG_ppp.km, 
                               sigma=bw.ppl, 
                               edge=TRUE,
                               kernel="gaussian")
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "bw.diggle")
plot(kde_childcareSG.ppl, main = "bw.ppl")
```

### Working with different kernel methods

By default, the kernel method used in *density.ppp()* is *gaussian*. But there are three other options, namely: Epanechnikov, Quartic and Dics.

The code chunk below will be used to compute three more kernel density estimations by using these three kernel function.

```{r fig.width=16, fig.height=10}
par(mfrow=c(2,2))
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="Gaussian")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="epanechnikov"), 
     main="Epanechnikov")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="quartic"), 
     main="Quartic")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="disc"), 
     main="Disc")
```

## Fixed and Adaptive KDE

### Computing KDE by using fixed bandwidth

Next, you will compute a KDE layer by defining a bandwidth of 600 meter. Notice that in the code chunk below, the sigma value used is 0.6. This is because the unit of measurement of ***childcareSG_ppp.km*** object is in kilometer, hence the 600m is 0.6km.

```{r}
kde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG_600)
```

### Computing KDE by using adaptive bandwidth

Fixed bandwidth method is very sensitive to highly skew distribution of spatial point patterns over geographical units for example urban versus rural. One way to overcome this problem is by using adaptive bandwidth instead.

In this section, you will learn how to derive adaptive kernel density estimation by using [*density.adaptive()*](https://rdrr.io/cran/spatstat/man/adaptive.density.html) of **spatstat**.

```{r}
kde_childcareSG_adaptive <- adaptive.density(
  childcareSG_ppp.km, 
  method="kernel")
plot(kde_childcareSG_adaptive)
```

We can compare the fixed and adaptive kernel density estimation outputs by using the code chunk below.

```{r fig.width=16, fig.height=6}
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "Fixed bandwidth")
plot(kde_childcareSG_adaptive, main = "Adaptive bandwidth")
```

#### Converting gridded output into raster

Next, we will convert the im kernal density objects into **SpatRaster** object by using `rast()` of **terra** package.

```{r}
kde_childcareSG_bw_terra <- rast(kde_childcareSG.bw)
```

Again, `class()` is used to verify if *kde_childcareSG_bw_terra* data are belong to **SpatRaster** class. 

```{r}
class(kde_childcareSG_bw_terra)
```

Yes, it is indeed in SpatRaster class.

Let us take a look at the properties of *kde_childcareSG_bw_terra* .

```{r}
kde_childcareSG_bw_terra
```

Notice that the crs property is empty.

#### Assigning projection systems

In code chunk below, `crs()` of terra is used to assign the CRS information on *kde_childcareSG_bw_terra* layer.

```{r}
crs(kde_childcareSG_bw_terra) <- "EPSG:3414"
```

Let us take a look at the properties of *kde_childcareSG_bw_raster* RasterLayer.

```{r}
kde_childcareSG_bw_terra
```


Notice that the coordicates reference (i.e. coord. ref.) is in **SVY21** now.

### Visualising the output in **tmap**

Finally, we will display the raster in cartographic quality map using **tmap** package.

```{r}
tm_shape(kde_childcareSG_bw_terra) + 
  tm_raster(col.scale = 
              tm_scale_continuous(
                values = "viridis"),
            col.legend = tm_legend(
            title = "Density values",
            title.size = 0.7,
            text.size = 0.7,
            bg.color = "white",
            bg.alpha = 0.7,
            position = tm_pos_in(
              "right", "bottom"),
            frame = TRUE)) +
  tm_graticules(labels.size = 0.7) +
  tm_compass() +
  tm_layout(scale = 1.0)
```

Notice that the raster values are encoded explicitly onto the raster pixel using the values in "layer.1" field.

### Comparing Spatial Point Patterns using KDE

In this section, you will learn how to compare KDE of childcare at Ponggol, Tampines, Chua Chu Kang and Jurong West planning areas.

#### Extracting study area

The code chunk below will be used to extract the target planning areas.

```{r}
pg <- mpsz_sf %>%
  filter(PLN_AREA_N == "PUNGGOL")
tm <- mpsz_sf %>%
  filter(PLN_AREA_N == "TAMPINES")
ck <- mpsz_sf %>%
  filter(PLN_AREA_N == "CHOA CHU KANG")
jw <- mpsz_sf %>%
  filter(PLN_AREA_N == "JURONG WEST")
```

Plotting target planning areas

```{r fig.width=16, fig.height=10}
par(mfrow=c(2,2))
plot(pg, main = "Ponggol")
plot(tm, main = "Tampines")
plot(ck, main = "Choa Chu Kang")
plot(jw, main = "Jurong West")
```

#### Creating ***owin*** object

Now, we will convert these sf objects into owin objects that is required by **spatstat**.

```{r}
pg_owin = as.owin(pg)
tm_owin = as.owin(tm)
ck_owin = as.owin(ck)
jw_owin = as.owin(jw)
```

#### Combining childcare points and the study area

By using the code chunk below, we are able to extract childcare that is within the specific region to do our analysis later on.

```{r}
childcare_pg_ppp = childcare_ppp[pg_owin]
childcare_tm_ppp = childcare_ppp[tm_owin]
childcare_ck_ppp = childcare_ppp[ck_owin]
childcare_jw_ppp = childcare_ppp[jw_owin]
```

Next, *rescale.ppp()* function is used to trasnform the unit of measurement from metre to kilometre.

```{r}
childcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, "km")
```

The code chunk below is used to plot these four study areas and the locations of the childcare centres.

```{r fig.width=16, fig.height=10}
par(mfrow=c(2,2))
plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Jurong West")
```

#### Computing KDE

The code chunk below will be used to compute the KDE of these four planning area. ***bw.diggle*** method is used to derive the bandwidth of each

```{r fig.width=16, fig.height=10}
par(mfrow=c(2,2))
plot(density(childcare_pg_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tempines")
plot(density(childcare_ck_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Choa Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="JUrong West")
```

#### Computing fixed bandwidth KDE

For comparison purposes, we will use 250m as the bandwidth.

```{r fig.width=16, fig.height=10}
par(mfrow=c(2,2))
plot(density(childcare_ck_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Chou Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="JUrong West")
plot(density(childcare_pg_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tampines")
```

## Nearest Neighbour Analysis

In this section, we will perform the Clark-Evans test of aggregation for a spatial point pattern by using [*clarkevans.test()*](https://www.rdocumentation.org/packages/spatstat/versions/1.63-3/topics/clarkevans.test) of **statspat**.

The test hypotheses are:

Ho = The distribution of childcare services are randomly distributed.

H1= The distribution of childcare services are not randomly distributed.

The 95% confident interval will be used.

### Testing spatial point patterns using Clark and Evans Test

```{r}
clarkevans.test(childcareSG_ppp,
                correction="none",
                clipregion="sg_owin",
                alternative=c("clustered"),
                nsim=99)
```

What conclusion can you draw from the test result?

### Clark and Evans Test: Choa Chu Kang planning area

In the code chunk below, [*clarkevans.test()*](https://rdrr.io/cran/spatstat/man/clarkevans.test.html) of **spatstat** is used to performs Clark-Evans test of aggregation for childcare centre in Choa Chu Kang planning area.

```{r}
clarkevans.test(childcare_ck_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

### Clark and Evans Test: Tampines planning area

In the code chunk below, the similar test is used to analyse the spatial point patterns of childcare centre in Tampines planning area.

```{r}
clarkevans.test(childcare_tm_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

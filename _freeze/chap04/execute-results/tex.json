{
  "hash": "9f834b339630af014800e641f5166700",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"1st Order Spatial Point Patterns Analysis Methods\"\ndate: \"January 8, 2023\"\ndate-modified: \"last-modified\"\nformat: html\nexecute:\n  message: false\n  warning: false\n  freeze: true\neditor: visual\n---\n\n\n\n## Overview\n\nSpatial Point Pattern Analysis is the evaluation of the pattern or distribution, of a set of points on a surface. The point can be location of:\n\n-   events such as crime, traffic accident and disease onset, or\n-   business services (coffee and fastfood outlets) or facilities such as childcare and eldercare.\n\nUsing appropriate functions of [spatstat](https://cran.r-project.org/web/packages/spatstat/), this hands-on exercise aims to discover the spatial point processes of childecare centres in Singapore.\n\nThe specific questions we would like to answer are as follows:\n\n-   are the childcare centres in Singapore randomly distributed throughout the country?\\\n-   if the answer is not, then the next logical question is where are the locations with higher concentration of childcare centres?\n\n## The data\n\nTo provide answers to the questions above, three data sets will be used. They are:\n\n-   `CHILDCARE`, a point feature data providing both location and attribute information of childcare centres. It was downloaded from Data.gov.sg and is in geojson format.\n-   `MP14_SUBZONE_WEB_PL`, a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from Data.gov.sg.\n-   `CostalOutline`, a polygon feature data showing the national boundary of Singapore. It is provided by SLA and is in ESRI shapefile format.\n\n## Installing and Loading the R packages\n\nIn this hands-on exercise, five R packages will be used, they are:\n\n-   [**sf**](https://r-spatial.github.io/sf/), a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.\n-   [**spatstat**](https://spatstat.org/), which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.\n-   [**raster**](https://cran.r-project.org/web/packages/raster/) which reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format.\n-   [**maptools**](https://cran.r-project.org/web/packages/maptools/index.html) which provides a set of tools for manipulating geographic data. In this hands-on exercise, we mainly use it to convert *Spatial* objects into *ppp* format of **spatstat**.\n-   [**tmap**](https://cran.r-project.org/web/packages/tmap/index.html) which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API.\n\nUse the code chunk below to install and launch the five R packages.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, raster, spatstat, tmap, tidyverse)\n```\n:::\n\n\n\n## Spatial Data Wrangling\n\n### Importing the spatial data\n\nIn this section, [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package will be used to import these three geospatial data sets into R.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare_sf <- st_read(\"chap04/data/child-care-services-geojson.geojson\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `child-care-services-geojson' from data source \n  `D:\\tskam\\r4gdsa\\chap04\\data\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nsg_sf <- st_read(dsn = \"chap04/data\", layer=\"CostalOutline\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `CostalOutline' from data source `D:\\tskam\\r4gdsa\\chap04\\data' using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n```\n\n\n:::\n\n```{.r .cell-code}\nmpsz_sf <- st_read(dsn = \"chap04/data\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source `D:\\tskam\\r4gdsa\\chap04\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\n\nBefore we can use these data for analysis, it is important for us to ensure that they are projected in same projection system.\n\n> DIY: Using the appropriate **sf** function you learned in Hands-on Exercise 2, retrieve the referencing system information of these geospatial data.\n\n\n\n::: {.cell}\n\n:::\n\n\n\nNotice that except `childcare_sf`, both `mpsz_sf` and `sg_sf` do not have proper crs information.\n\n> DIY: Using the method you learned in Lesson 2, assign the correct crs to mpsz_sf and sg_sf simple feature data frames.\n\n> DIY: If necessary, changing the referencing system to Singapore national projected coordinate system.\n\n### Mapping the geospatial data sets\n\nAfter checking the referencing system of each geospatial data data frame, it is also useful for us to plot a map to show their spatial patterns.\n\n> DIY: Using the mapping methods you learned in Hands-on Exercise 3, prepare a map as shown below.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](chap04_files/figure-pdf/unnamed-chunk-4-1.pdf)\n:::\n:::\n\n\n\nNotice that all the geospatial layers are within the same map extend. This shows that their referencing system and coordinate values are referred to similar spatial context. This is very important in any geospatial analysis.\n\nAlternatively, we can also prepare a pin map by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('view')\ntm_shape(childcare_sf)+\n  tm_dots()\n```\n\n::: {.cell-output-display}\n![](chap04_files/figure-pdf/unnamed-chunk-5-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\ntmap_mode('plot')\n```\n:::\n\n\n\nNotice that at the interactive mode, **tmap** is using [**leaflet for R**](https://rstudio.github.io/leaflet/) API. The advantage of this interactive pin map is it allows us to navigate and zoom around the map freely. We can also query the information of each simple feature (i.e. the point) by clicking of them. Last but not least, you can also change the background of the internet map layer. Currently, three internet map layers are provided. They are: ESRI.WorldGrayCanvas, OpenStreetMap, and ESRI.WorldTopoMap. The default is ESRI.WorldGrayCanvas.\n\n> Reminder: Always remember to switch back to plot mode after the interactive map. This is because, each interactive mode will consume a connection. You should also avoid displaying ecessive numbers of interactive maps (i.e. not more than 10) in one RMarkdown document when publish on Netlify.\n\n## Geospatial Data wrangling\n\nAlthough simple feature data frame is gaining popularity again sp's Spatial\\* classes, there are, however, many geospatial analysis packages require the input geospatial data in sp's Spatial\\* classes. In this section, you will learn how to convert simple feature data frame to sp's Spatial\\* class.\n\n### Converting sf data frames to sp's Spatial\\* class\n\nThe code chunk below uses [*as_Spatial()*]() of **sf** package to convert the three geospatial data from simple feature data frame to sp's Spatial\\* class.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare <- as_Spatial(childcare_sf)\nmpsz <- as_Spatial(mpsz_sf)\nsg <- as_Spatial(sg_sf)\n```\n:::\n\n\n\n> DIY: Using appropriate function, display the information of these three Spatial\\* classes as shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPointsDataFrame \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Nameescription \nmin values  :   kml_1, <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>018989</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>1, MARINA BOULEVARD, #B1 - 01, ONE MARINA BOULEVARD, SINGAPORE 018989</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>THE LITTLE SKOOL-HOUSE INTERNATIONAL PTE. LTD.</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>08F73931F4A691F4</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center> \nmax values  : kml_999,                  <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>829646</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>200, PONGGOL SEVENTEENTH AVENUE, SINGAPORE 829646</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td>Child Care Services</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>RAFFLES KIDZ @ PUNGGOL PTE LTD</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>379D017BF244B0FA</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center> \n```\n\n\n:::\n\n```{.r .cell-code}\nmpsz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +datum=WGS84 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n```\n\n\n:::\n\n```{.r .cell-code}\nsg\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +datum=WGS84 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND \n```\n\n\n:::\n:::\n\n\n\nNotice that the geospatial data have been converted into their respective sp's Spatial\\* classes now.\n\n### Converting the Spatial\\* class into generic sp format\n\n**spatstat** requires the analytical data in ***ppp*** object form. There is no direct way to convert a Spatial\\* classes into ***ppp*** object. We need to convert the ***Spatial*** **classes**\\* into ***Spatial*** object first.\n\nThe codes chunk below converts the Spatial\\* classes into generic sp objects.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare_sp <- as(childcare, \"SpatialPoints\")\nsg_sp <- as(sg, \"SpatialPolygons\")\n```\n:::\n\n\n\nNext, you should display the sp objects properties as shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare_sp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n```\n\n\n:::\n\n```{.r .cell-code}\nsg_sp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +datum=WGS84 +units=m +no_defs \n```\n\n\n:::\n:::\n\n\n\n> Challenge: Do you know what are the differences between Spatial\\* classes and generic sp object?\n\n### Converting the generic sp format into spatstat's ppp format\n\nNow, we will use *as.ppp()* function of **spatstat** to convert the spatial data into **spatstat**'s ***ppp*** object format.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare_ppp <- as.ppp(childcare_sf)\nchildcare_ppp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern: 1545 points\nmarks are of storage type  'character'\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n```\n\n\n:::\n:::\n\n\n\nNow, let us plot ***childcare_ppp*** and examine the different.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(childcare_ppp)\n```\n\n::: {.cell-output-display}\n![](chap04_files/figure-pdf/unnamed-chunk-11-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nYou can take a quick look at the summary statistics of the newly created ppp object by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(childcare_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1545 character character \n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n```\n\n\n:::\n:::\n\n\n\nNotice the warning message about duplicates. In spatial point patterns analysis an issue of significant is the presence of duplicates. The statistical methodology used for spatial point patterns processes is based largely on the assumption that process are *simple*, that is, that the points cannot be coincident.\n\n### Handling duplicated points\n\nWe can check the duplication in a ***ppp*** object by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany(duplicated(childcare_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\nTo count the number of co-indicence point, we will use the *multiplicity()* function as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmultiplicity(childcare_ppp)\n```\n:::\n\n\n\nIf we want to know how many locations have more than one point event, we can use the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(multiplicity(childcare_ppp) > 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\n\nThe output shows that there are 128 duplicated point events.\n\nTo view the locations of these duplicate point events, we will plot `childcare` data by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('view')\ntm_shape(childcare) +\n  tm_dots(alpha=0.4, \n          size=0.05)\n```\n\n::: {.cell-output-display}\n![](chap04_files/figure-pdf/unnamed-chunk-16-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\ntmap_mode('plot')\n```\n:::\n\n\n\n> Challenge: Do you know how to spot the duplicate points from the map shown above?\n\nThere are three ways to overcome this problem. The easiest way is to delete the duplicates. But, that will also mean that some useful point events will be lost.\n\nThe second solution is use *jittering*, which will add a small perturbation to the duplicate points so that they do not occupy the exact same space.\n\nThe third solution is to make each point \"unique\" and then attach the duplicates of the points to the patterns as **marks**, as attributes of the points. Then you would need analytical techniques that take into account these marks.\n\nThe code chunk below implements the jittering approach.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare_ppp_jit <- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n```\n:::\n\n\n\n> DIY: Using the method you learned in previous section, check if any dusplicated point in this geospatial data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany(duplicated(childcare_ppp_jit))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n### Creating ***owin*** object\n\nWhen analysing spatial point patterns, it is a good practice to confine the analysis with a geographical area like Singapore boundary. In **spatstat**, an object called ***owin*** is specially designed to represent this polygonal region.\n\nThe code chunk below is used to covert *sg* SpatialPolygon object into owin object of **spatstat**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsg_owin <- as.owin(sg_sf)\n```\n:::\n\n\n\nThe ouput object can be displayed by using *plot()* function\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(sg_owin)\n```\n\n::: {.cell-output-display}\n![](chap04_files/figure-pdf/unnamed-chunk-20-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nand *summary()* function of Base R.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(sg_owin)\n```\n:::\n\n\n\n### Combining point events object and owin object\n\nIn this last step of geospatial data wrangling, we will extract childcare events that are located within Singapore by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcareSG_ppp = childcare_ppp[sg_owin]\n```\n:::\n\n\n\nThe output object combined both the point and polygon feature in one ppp object class as shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(childcareSG_ppp)\n```\n:::\n\n\n\n> DIY: Using the method you learned in previous exercise, plot the newly derived childcareSG_ppp as shown below.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](chap04_files/figure-pdf/unnamed-chunk-24-1.pdf)\n:::\n:::\n\n\n\n## First-order Spatial Point Patterns Analysis\n\nIn this section, you will learn how to perform first-order SPPA by using **spatstat** package. The hands-on exercise will focus on:\n\n-   deriving **kernel density estimation (KDE)** layer for visualising and exploring the intensity of point processes,\n-   performing **Confirmatory Spatial Point Patterns Analysis** by using **Nearest Neighbour** statistics.\n\n### Kernel Density Estimation\n\nIn this section, you will learn how to compute the kernel density estimation (KDE) of childcare services in Singapore.\n\n#### Computing kernel density estimation using automatic bandwidth selection method\n\nThe code chunk below computes a kernel density by using the following configurations of [*density()*](https://rdrr.io/cran/spatstat/man/density.ppp.html) of **spatstat**:\n\n-   [*bw.diggle()*](https://rdrr.io/cran/spatstat/man/bw.diggle.html) automatic bandwidth selection method. Other recommended methods are [*bw.CvL()*](https://rdrr.io/cran/spatstat/man/bw.CvL.html), [*bw.scott()*](https://rdrr.io/cran/spatstat/man/bw.scott.html) or [*bw.ppl()*](https://rdrr.io/cran/spatstat/man/bw.ppl.html).\\\n-   The smoothing kernel used is *gaussian*, which is the default. Other smoothing methods are: \"epanechnikov\", \"quartic\" or \"disc\".\\\n-   The intensity estimate is corrected for edge effect bias by using method described by Jones (1993) and Diggle (2010, equation 18.9). The default is *FALSE*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_childcareSG_bw <- density(childcareSG_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n```\n:::\n\n\n\nThe *plot()* function of Base R is then used to display the kernel density derived.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(kde_childcareSG_bw)\n```\n\n::: {.cell-output-display}\n![](chap04_files/figure-pdf/unnamed-chunk-26-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nThe density values of the output range from 0 to 0.000035 which is way too small to comprehend. This is because the default unit of measurement of svy21 is in meter. As a result, the density values computed is in \"number of points per square meter\".\n\nBefore we move on to next section, it is good to know that you can retrieve the bandwidth used to compute the kde layer by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw <- bw.diggle(childcareSG_ppp)\nbw\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   sigma \n298.4095 \n```\n\n\n:::\n:::\n\n\n\n#### Rescalling KDE values\n\nIn the code chunk below, *rescale.ppp()* is used to covert the unit of measurement from meter to kilometer.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcareSG_ppp.km <- rescale.ppp(childcareSG_ppp, 1000, \"km\")\n```\n:::\n\n\n\nNow, we can re-run *density()* using the resale data set and plot the output kde map.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG.bw)\n```\n\n::: {.cell-output-display}\n![](chap04_files/figure-pdf/unnamed-chunk-29-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nNotice that output image looks identical to the earlier version, the only changes in the data values (refer to the legend).\n\n### Working with different automatic badwidth methods\n\nBeside *bw.diggle()*, there are three other **spatstat** functions can be used to determine the bandwidth, they are: *bw.CvL()*, *bw.scott()*, and *bw.ppl()*.\n\nLet us take a look at the bandwidth return by these automatic bandwidth calculation methods by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n bw.CvL(childcareSG_ppp.km)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   sigma \n4.543278 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw.scott(childcareSG_ppp.km)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n sigma.x  sigma.y \n2.224898 1.450966 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw.ppl(childcareSG_ppp.km)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    sigma \n0.3897114 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw.diggle(childcareSG_ppp.km)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    sigma \n0.2984095 \n```\n\n\n:::\n:::\n\n\n\nBaddeley et. (2016) suggested the use of the *bw.ppl()* algorithm because in ther experience it tends to produce the more appropriate values when the pattern consists predominantly of tight clusters. But they also insist that if the purpose of once study is to detect a single tight cluster in the midst of random noise then the *bw.diggle()* method seems to work best.\n\nThe code chunk beow will be used to compare the output of using *bw.diggle* and *bw.ppl* methods.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_childcareSG.ppl <- density(childcareSG_ppp.km, \n                               sigma=bw.ppl, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"bw.diggle\")\nplot(kde_childcareSG.ppl, main = \"bw.ppl\")\n```\n\n::: {.cell-output-display}\n![](chap04_files/figure-pdf/unnamed-chunk-34-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Working with different kernel methods\n\nBy default, the kernel method used in *density.ppp()* is *gaussian*. But there are three other options, namely: Epanechnikov, Quartic and Dics.\n\nThe code chunk below will be used to compute three more kernel density estimations by using these three kernel function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(2,2))\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")\n```\n\n::: {.cell-output-display}\n![](chap04_files/figure-pdf/unnamed-chunk-35-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Fixed and Adaptive KDE\n\n### Computing KDE by using fixed bandwidth\n\nNext, you will compute a KDE layer by defining a bandwidth of 600 meter. Notice that in the code chunk below, the sigma value used is 0.6. This is because the unit of measurement of ***childcareSG_ppp.km*** object is in kilometer, hence the 600m is 0.6km.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG_600)\n```\n\n::: {.cell-output-display}\n![](chap04_files/figure-pdf/unnamed-chunk-36-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Computing KDE by using adaptive bandwidth\n\nFixed bandwidth method is very sensitive to highly skew distribution of spatial point patterns over geographical units for example urban versus rural. One way to overcome this problem is by using adaptive bandwidth instead.\n\nIn this section, you will learn how to derive adaptive kernel density estimation by using [*density.adaptive()*](https://rdrr.io/cran/spatstat/man/adaptive.density.html) of **spatstat**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method=\"kernel\")\nplot(kde_childcareSG_adaptive)\n```\n\n::: {.cell-output-display}\n![](chap04_files/figure-pdf/unnamed-chunk-37-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nWe can compare the fixed and adaptive kernel density estimation outputs by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"Fixed bandwidth\")\nplot(kde_childcareSG_adaptive, main = \"Adaptive bandwidth\")\n```\n\n::: {.cell-output-display}\n![](chap04_files/figure-pdf/unnamed-chunk-38-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Converting KDE output into grid object.\n\nThe result is the same, we just convert it so that it is suitable for mapping purposes\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngridded_kde_childcareSG_bw <- as.SpatialGridDataFrame.im(kde_childcareSG.bw)\nspplot(gridded_kde_childcareSG_bw)\n```\n:::\n\n\n\n#### Converting gridded output into raster\n\nNext, we will convert the gridded kernal density objects into RasterLayer object by using *raster()* of **raster** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_childcareSG_bw_raster <- raster(kde_childcareSG.bw)\n```\n:::\n\n\n\nLet us take a look at the properties of *kde_childcareSG_bw_raster* RasterLayer.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_childcareSG_bw_raster\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : layer \nvalues     : -8.476185e-15, 28.51831  (min, max)\n```\n\n\n:::\n:::\n\n\n\nNotice that the crs property is NA.\n\n#### Assigning projection systems\n\nThe code chunk below will be used to include the CRS information on kde_childcareSG_bw_raster RasterLayer.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprojection(kde_childcareSG_bw_raster) <- CRS(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -8.476185e-15, 28.51831  (min, max)\n```\n\n\n:::\n:::\n\n\n\nNotice that the crs property is completed.\n\n### Visualising the output in **tmap**\n\nFinally, we will display the raster in cartographic quality map using **tmap** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(kde_childcareSG_bw_raster) + \n  tm_raster(\"layer\", palette = \"viridis\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n```\n\n::: {.cell-output-display}\n![](chap04_files/figure-pdf/unnamed-chunk-43-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nNotice that the raster values are encoded explicitly onto the raster pixel using the values in \"v\"\" field.\n\n### Comparing Spatial Point Patterns using KDE\n\nIn this section, you will learn how to compare KDE of childcare at Ponggol, Tampines, Chua Chu Kang and Jurong West planning areas.\n\n#### Extracting study area\n\nThe code chunk below will be used to extract the target planning areas.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npg <- mpsz_sf %>%\n  filter(PLN_AREA_N == \"PUNGGOL\")\ntm <- mpsz_sf %>%\n  filter(PLN_AREA_N == \"TAMPINES\")\nck <- mpsz_sf %>%\n  filter(PLN_AREA_N == \"CHOA CHU KANG\")\njw <- mpsz_sf %>%\n  filter(PLN_AREA_N == \"JURONG WEST\")\n```\n:::\n\n\n\nPlotting target planning areas\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(2,2))\nplot(pg, main = \"Ponggol\")\n```\n\n::: {.cell-output-display}\n![](chap04_files/figure-pdf/unnamed-chunk-45-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\nplot(tm, main = \"Tampines\")\n```\n\n::: {.cell-output-display}\n![](chap04_files/figure-pdf/unnamed-chunk-45-2.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\nplot(ck, main = \"Choa Chu Kang\")\n```\n\n::: {.cell-output-display}\n![](chap04_files/figure-pdf/unnamed-chunk-45-3.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\nplot(jw, main = \"Jurong West\")\n```\n\n::: {.cell-output-display}\n![](chap04_files/figure-pdf/unnamed-chunk-45-4.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n#### Creating ***owin*** object\n\nNow, we will convert these sf objects into owin objects that is required by **spatstat**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npg_owin = as.owin(pg)\ntm_owin = as.owin(tm)\nck_owin = as.owin(ck)\njw_owin = as.owin(jw)\n```\n:::\n\n\n\n#### Combining childcare points and the study area\n\nBy using the code chunk below, we are able to extract childcare that is within the specific region to do our analysis later on.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n```\n:::\n\n\n\nNext, *rescale.ppp()* function is used to trasnform the unit of measurement from metre to kilometre.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, \"km\")\n```\n:::\n\n\n\nThe code chunk below is used to plot these four study areas and the locations of the childcare centres.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n```\n\n::: {.cell-output-display}\n![](chap04_files/figure-pdf/unnamed-chunk-49-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n#### Computing KDE\n\nThe code chunk below will be used to compute the KDE of these four planning area. ***bw.diggle*** method is used to derive the bandwidth of each\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(2,2))\nplot(density(childcare_pg_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tempines\")\nplot(density(childcare_ck_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\n```\n\n::: {.cell-output-display}\n![](chap04_files/figure-pdf/unnamed-chunk-50-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n#### Computing fixed bandwidth KDE\n\nFor comparison purposes, we will use 250m as the bandwidth.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(2,2))\nplot(density(childcare_ck_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Chou Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\nplot(density(childcare_pg_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")\n```\n\n::: {.cell-output-display}\n![](chap04_files/figure-pdf/unnamed-chunk-51-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Nearest Neighbour Analysis\n\nIn this section, we will perform the Clark-Evans test of aggregation for a spatial point pattern by using [*clarkevans.test()*](https://www.rdocumentation.org/packages/spatstat/versions/1.63-3/topics/clarkevans.test) of **statspat**.\n\nThe test hypotheses are:\n\nHo = The distribution of childcare services are randomly distributed.\n\nH1= The distribution of childcare services are not randomly distributed.\n\nThe 95% confident interval will be used.\n\n### Testing spatial point patterns using Clark and Evans Test\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclarkevans.test(childcareSG_ppp,\n                correction=\"none\",\n                clipregion=\"sg_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  childcareSG_ppp\nR = 0.55631, p-value < 2.2e-16\nalternative hypothesis: clustered (R < 1)\n```\n\n\n:::\n:::\n\n\n\nWhat conclusion can you draw from the test result?\n\n### Clark and Evans Test: Choa Chu Kang planning area\n\nIn the code chunk below, [*clarkevans.test()*](https://rdrr.io/cran/spatstat/man/clarkevans.test.html) of **spatstat** is used to performs Clark-Evans test of aggregation for childcare centre in Choa Chu Kang planning area.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclarkevans.test(childcare_ck_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  childcare_ck_ppp\nR = 0.90509, p-value = 0.1562\nalternative hypothesis: two-sided\n```\n\n\n:::\n:::\n\n\n\n### Clark and Evans Test: Tampines planning area\n\nIn the code chunk below, the similar test is used to analyse the spatial point patterns of childcare centre in Tampines planning area.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclarkevans.test(childcare_tm_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  childcare_tm_ppp\nR = 0.78387, p-value = 9.59e-05\nalternative hypothesis: two-sided\n```\n\n\n:::\n:::\n",
    "supporting": [
      "chap04_files\\figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}
{
  "hash": "519874d97e755e5fc27927ec00ab5cfc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Network Constrained Spatial Point Patterns Analysis\"\ndate: \"January 21, 2023\"\ndate-modified: \"last-modified\"\nformat: html\nexecute:\n  message: false\n  warning: false\n  freeze: true\neditor: visual\n---\n\n\n\n## Overview\n\n**Network constrained Spatial Point Patterns Analysis (NetSPAA)** is a collection of spatial point patterns analysis methods special developed for analysing spatial point event occurs on or alongside network. The spatial point event can be locations of traffic accident or childcare centre for example. The network, on the other hand can be a road network or river network.\n\nIn this hands-on exercise, you are going to gain hands-on experience on using appropriate functions of **spNetwork** package:\n\n-   to derive **network kernel density estimation (NKDE)**, and\n-   to perform network G-function and k-function analysis\n\n## The Data\n\nIn this study, we will analyse the spatial distribution of childcare centre in [Punggol planning area](https://en.wikipedia.org/wiki/Punggol). For the purpose of this study, two geospatial data sets will be used. They are:\n\n-   *Punggol_St*, a line features geospatial data which store the road network within Punggol Planning Area.\n-   *Punggol_CC*, a point feature geospatial data which store the location of childcare centres within Punggol Planning Area.\n\nBoth data sets are in ESRI shapefile format.\n\n## Installing and launching the R packages\n\nIn this hands-on exercise, four R packages will be used, they are:\n\n-   [spNetwork](https://cran.r-project.org/web/packages/spNetwork/index.html), which provides functions to perform Spatial Point Patterns Analysis such as kernel density estimation (KDE) and K-function on network. It also can be used to build spatial matrices ('listw' objects like in 'spdep' package) to conduct any kind of traditional spatial analysis with spatial weights based on reticular distances.\n-   [sf](https://r-spatial.github.io/sf/index.html) package provides functions to manage, processing, and manipulate **Simple Features**, a formal geospatial data standard that specifies a storage and access model of spatial geometries such as points, lines, and polygons.\n-   [**tmap**](https://cran.r-project.org/web/packages/tmap/index.html) which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API.\n\nUse the code chunk below to install and launch the four R packages.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spNetwork, tmap, tidyverse)\n```\n:::\n\n\n\n## Data Import and Preparation\n\nThe code chunk below uses `st_read()` of **sf** package to important Punggol_St and Punggol_CC geospatial data sets into RStudio as sf data frames.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnetwork <- st_read(dsn=\"chap07/data/geospatial\", \n                   layer=\"Punggol_St\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Punggol_St' from data source \n  `D:\\tskam\\r4gdsa\\chap07\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 2642 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 34038.56 ymin: 40941.11 xmax: 38882.85 ymax: 44801.27\nProjected CRS: SVY21 / Singapore TM\n```\n\n\n:::\n\n```{.r .cell-code}\nchildcare <- st_read(dsn=\"chap07/data/geospatial\",\n                     layer=\"Punggol_CC\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Punggol_CC' from data source \n  `D:\\tskam\\r4gdsa\\chap07\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 61 features and 1 field\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 34423.98 ymin: 41503.6 xmax: 37619.47 ymax: 44685.77\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\n```\n\n\n:::\n:::\n\n\n\nWe can examine the structure of the output simple features data tables in RStudio. Alternative, code chunk below can be used to print the content of network and childcare simple features objects by using the code chunk below.\n\n::: panel-tabset\n## Childcare\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 61 features and 1 field\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 34423.98 ymin: 41503.6 xmax: 37619.47 ymax: 44685.77\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n      Name                      geometry\n1   kml_10 POINT Z (36173.81 42550.33 0)\n2   kml_99 POINT Z (36479.56 42405.21 0)\n3  kml_100 POINT Z (36618.72 41989.13 0)\n4  kml_101 POINT Z (36285.37 42261.42 0)\n5  kml_122  POINT Z (35414.54 42625.1 0)\n6  kml_161 POINT Z (36545.16 42580.09 0)\n7  kml_172 POINT Z (35289.44 44083.57 0)\n8  kml_188 POINT Z (36520.56 42844.74 0)\n9  kml_205  POINT Z (36924.01 41503.6 0)\n10 kml_222 POINT Z (37141.76 42326.36 0)\n```\n\n\n:::\n:::\n\n\n\n## Network\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnetwork\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 2642 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 34038.56 ymin: 40941.11 xmax: 38882.85 ymax: 44801.27\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n     LINK_ID                   ST_NAME                       geometry\n1  116130894                PUNGGOL RD LINESTRING (36546.89 44574....\n2  116130897 PONGGOL TWENTY-FOURTH AVE LINESTRING (36546.89 44574....\n3  116130901   PONGGOL SEVENTEENTH AVE LINESTRING (36012.73 44154....\n4  116130902   PONGGOL SEVENTEENTH AVE LINESTRING (36062.81 44197....\n5  116130907           PUNGGOL CENTRAL LINESTRING (36131.85 42755....\n6  116130908                PUNGGOL RD LINESTRING (36112.93 42752....\n7  116130909           PUNGGOL CENTRAL LINESTRING (36127.4 42744.5...\n8  116130910               PUNGGOL FLD LINESTRING (35994.98 42428....\n9  116130911               PUNGGOL FLD LINESTRING (35984.97 42407....\n10 116130912            EDGEFIELD PLNS LINESTRING (36200.87 42219....\n```\n\n\n:::\n:::\n\n\n:::\n\nWhen I exploring spNetwork's functions, it came to my attention that spNetwork is expecting the geospatial data contains complete CRS information.\n\n## Visualising the Geospatial Data\n\nBefore we jump into the analysis, it is a good practice to visualise the geospatial data. There are at least two ways to visualise the geospatial data. One way is by using *plot()* of Base R as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(network))\nplot(childcare,add=T,col='red',pch = 19)\n```\n\n::: {.cell-output-display}\n![](chap07_files/figure-pdf/unnamed-chunk-5-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nTo visualise the geospatial data with high cartographic quality and interactive manner, the mapping function of **tmap** package can be used as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('view')\ntm_shape(childcare) + \n  tm_dots() + \n  tm_shape(network) +\n  tm_lines()\n```\n\n::: {.cell-output-display}\n![](chap07_files/figure-pdf/unnamed-chunk-6-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\ntmap_mode('plot')\n```\n:::\n\n\n\n## Network KDE (NKDE) Analysis\n\nIn this section, we will perform NKDE analysis by using appropriate functions provided in **spNetwork** package.\n\n### Preparing the lixels objects\n\nBefore computing NKDE, the SpatialLines object need to be cut into lixels with a specified minimal distance. This task can be performed by using with [lixelize_lines()](https://jeremygelb.github.io/spNetwork/reference/lixelize_lines.html) of **spNetwork** as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlixels <- lixelize_lines(network, \n                         700, \n                         mindist = 375)\n```\n:::\n\n\n\nWhat can we learned from the code chunk above:\n\n-   The length of a lixel, *lx_length* is set to 700m, and\n-   The minimum length of a lixel, *mindist* is set to 350m.\n\nAfter cut, if the length of the final lixel is shorter than the minimum distance, then it is added to the previous lixel. If NULL, then mindist = maxdist/10. Also note that the segments that are already shorter than the minimum distance are not modified\n\n**Note:** There is another function called *lixelize_lines.mc()* which provide multicore support.\n\n### Generating line centre points\n\nNext, *lines_center()* of **spNetwork** will be used to generate a SpatialPointsDataFrame (i.e. samples) with line centre points as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsamples <- lines_center(lixels) \n```\n:::\n\n\n\nThe points are located at center of the line based on the length of the line.\n\n### Performing NKDE\n\nWe are ready to computer the NKDE by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndensities <- nkde(network, \n                  events = childcare,\n                  w = rep(1, nrow(childcare)),\n                  samples = samples,\n                  kernel_name = \"quartic\",\n                  bw = 300, \n                  div= \"bw\", \n                  method = \"simple\", \n                  digits = 1, \n                  tol = 1,\n                  grid_shape = c(1,1), \n                  max_depth = 8,\n                  agg = 5, \n                  sparse = TRUE,\n                  verbose = FALSE)\n```\n:::\n\n\n\nWhat can we learn from the code chunk above?\n\n-   *kernel_name* argument indicates that **quartic** kernel is used. Are possible kernel methods supported by spNetwork are: triangle, gaussian, scaled gaussian, tricube, cosine ,triweight, epanechnikov or uniform.\n-   *method* argument indicates that **simple** method is used to calculate the NKDE. Currently, spNetwork support three popular methods, they are:\n    -   method=\"simple\". This first method was presented by Xie et al. (2008) and proposes an intuitive solution. The distances between events and sampling points are replaced by network distances, and the formula of the kernel is adapted to calculate the density over a linear unit instead of an areal unit.\n    -   method=\"discontinuous\". The method is proposed by Okabe et al (2008), which equally \"divides\" the mass density of an event at intersections of lixels.\n    -   method=\"continuous\". If the discontinuous method is unbiased, it leads to a discontinuous kernel function which is a bit counter-intuitive. Okabe et al (2008) proposed another version of the kernel, that divide the mass of the density at intersection but adjusts the density before the intersection to make the function continuous.\n\nThe user guide of **spNetwork** package provide a comprehensive discussion of *nkde()*. You should read them at least once to have a basic understanding of the various parameters that can be used to calibrate the NKDE model.\n\n#### Visualising NKDE\n\nBefore we can visualise the NKDE values, code chunk below will be used to insert the computed density values (i.e. densities) into *samples* and *lixels* objects as *density* field.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsamples$density <- densities\nlixels$density <- densities\n```\n:::\n\n\n\nSince svy21 projection system is in meter, the computed density values are very small i.e. 0.0000005. The code chunk below is used to resale the density values from number of events per meter to number of events per kilometer.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# rescaling to help the mapping\nsamples$density <- samples$density*1000\nlixels$density <- lixels$density*1000\n```\n:::\n\n\n\nThe code below uses appropriate functions of tmap package to prepare interactive and high cartographic quality map visualisation.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('view')\ntm_shape(lixels)+\n  tm_lines(col=\"density\")+\ntm_shape(childcare)+\n  tm_dots()\ntmap_mode('plot')\n```\n:::\n\n\n\nThe interactive map above effectively reveals road segments (darker color) with relatively higher density of childcare centres than road segments with relatively lower density of childcare centres (lighter color)\n\n## Network Constrained G- and K-Function Analysis\n\nIn this section, we are going to perform complete spatial randomness (CSR) test by using *kfunctions()* of **spNetwork** package. The null hypothesis is defined as:\n\n**Ho: The observed spatial point events (i.e distribution of childcare centres) are uniformly distributed over a street network in Punggol Planning Area.**\n\nThe CSR test is based on the assumption of the binomial point process which implies the hypothesis that the childcare centres are randomly and independently distributed over the street network.\n\nIf this hypothesis is rejected, we may infer that the distribution of childcare centres are spatially interacting and dependent on each other; as a result, they may form nonrandom patterns.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun_childcare <- kfunctions(network, \n                             childcare,\n                             start = 0, \n                             end = 1000, \n                             step = 50, \n                             width = 50, \n                             nsim = 50, \n                             resolution = 50,\n                             verbose = FALSE, \n                             conf_int = 0.05)\n```\n:::\n\n\n\nWhat can we learn from the code chunk above?\n\nThere are ten arguments used in the code chunk above they are:\n\n-   lines: A SpatialLinesDataFrame with the sampling points. The geometries must be a SpatialLinesDataFrame (may crash if some geometries are invalid).\n-   points: A SpatialPointsDataFrame representing the points on the network. These points will be snapped on the network.\n-   start: A double, the start value for evaluating the k and g functions.\n-   end: A double, the last value for evaluating the k and g functions.\n-   step: A double, the jump between two evaluations of the k and g function.\n-   width: The width of each donut for the g-function.\n-   nsim: An integer indicating the number of Monte Carlo simulations required. In the above example, 50 simulation was performed. **Note:** most of the time, more simulations are required for inference\n-   resolution: When simulating random points on the network, selecting a resolution will reduce greatly the calculation time. When resolution is null the random points can occur everywhere on the graph. If a value is specified, the edges are split according to this value and the random points are selected vertices on the new network.\n-   conf_int: A double indicating the width confidence interval (default = 0.05).\n\nFor the usage of other arguments, you should refer to the user guide of **spNetwork** package.\n\nThe output of *kfunctions()* is a list with the following values:\n\n-   *plotkA*, a ggplot2 object representing the values of the k-function\n-   *plotgA*, a ggplot2 object representing the values of the g-function\n-   *valuesA*, a DataFrame with the values used to build the plots\n\nFor example, we can visualise the ggplot2 object of k-function by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun_childcare$plotk\n```\n\n::: {.cell-output-display}\n![](chap07_files/figure-pdf/unnamed-chunk-14-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nThe blue line is the empirical network K-function of the childcare centres in Punggol planning area. The gray envelop represents the results of the 50 simulations in the interval 2.5% - 97.5%. Because the blue line between the distance of 250m-400m are below the gray area, we can infer that the childcare centres in Punggol planning area resemble regular pattern at the distance of 250m-400m.\n\n## References\n\n-   [spNetwork: Spatial Analysis on Network](https://cran.r-project.org/web/packages/spNetwork/index.html)\n-   [Network Kernel Density Estimate](https://cran.r-project.org/web/packages/spNetwork/vignettes/NKDE.html)\n-   [Details about NKDE](https://cran.r-project.org/web/packages/spNetwork/vignettes/NKDEdetailed.html)\n-   [Network k Functions](https://cran.r-project.org/web/packages/spNetwork/vignettes/KNetworkFunctions.html)\n",
    "supporting": [
      "chap07_files\\figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}
{
  "hash": "e6ee95fdfbb2dc5a05c5cb279f2b1b4e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Thematic Mapping and GeoVisualisation with R'\ndate: \"December 23, 2022\"\ndate-modified: \"last-modified\"\nformat: \n  html:\n    toc: true\n    toc-depth: 5\nexecute:\n  echo: true\n  eval: true\n  warning: false\n  freeze: true\neditor: visual  \n---\n\n## Overview\n\nIn general, thematic mapping involves the use of map symbols to visualize selected properties of geographic features that are not naturally visible, such as population, temperature, crime rate, and property prices, just to mention a few of them.\n\nGeovisualisation, on the other hand, is the process of using visual representations and cartographic techniques to explore, analyze, and communicate geospatial data. It combines elements of cartography, computer science, and information visualization to enhance spatial understanding and knowledge discovery.\n\nIn this chapter, you will learn how to plot functional and truthful choropleth maps by using an R package called \\*\\*tmap\\*\\* package.\n\n### Survival Tip\n\nIt is advisable for you to read the functional description of each function before using them.\n\n## Getting Started\n\nIn this hands-on exercise, the key R package use is [**tmap**](https://cran.r-project.org/web/packages/tmap/) package in R. Beside **tmap** package, four other R packages will be used. They are:\n\n-   [**readr**](https://readr.tidyverse.org/) for importing delimited text file,\n-   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,\n-   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and\n-   [**sf**](https://cran.r-project.org/web/packages/sf/index.html) for handling geospatial data.\n-   [(*rvest*)](https://rvest.tidyverse.org/) for scraping (or harvesting) data from web pages. \n\nAmong the four packages, **readr**, **tidyr** and **dplyr** are part of **tidyverse** package.\n\nThe code chunk below will be used to install and load these packages in RStudio.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tmap, tidyverse, rvest)\n```\n:::\n\n\nNotice that, we only need to install **tidyverse** instead of **readr**, **tidyr** and **dplyr** individually.\n\n## Importing Data into R\n\n### The Data\n\nTwo data set will be used to create the choropleth map. They are:\n\n-   Master Plan 2019 Subzone Boundary (No Sea) (KML). It can be downloaded at [data.gov.sg](https://data.gov.sg/) This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2019.\n\n-   Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2024 in csv format (i.e. `respopagesextod2024.csv`). This is an aspatial data fie. It can be downloaded at [Department of Statistics, Singapore](https://www.singstat.gov.sg/). Although it does not contain any coordinates values, but it's PA and SZ fields can be used as unique identifiers to georeference to Master Plan 2019 Subzone Boundary.\n\n### Importing Geospatial Data into R\n\nThe code chunk below uses the *st_read()* function of **sf** package to import `MP14_SUBZONE_WEB_PL` shapefile into R as a simple feature data frame called `mpsz`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(\"chap02/data/geospatial/MasterPlan2019SubzoneBoundaryNoSeaKML.kml\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `C:\\tskam\\r4gdsa\\chap02\\data\\geospatial\\MasterPlan2019SubzoneBoundaryNoSeaKML.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n#### Tidying data\n\nFunction to extract values from the HTML description\n\n\n::: {.cell}\n\n```{.r .cell-code}\nextract_kml_field <- function(html_text, field_name) {\n  if (is.na(html_text) || html_text == \"\") return(NA_character_)\n  \n  page <- read_html(html_text)\n  rows <- page %>% html_elements(\"tr\")\n  \n  value <- rows %>%\n    keep(~ html_text2(html_element(.x, \"th\")) == field_name) %>%\n    html_element(\"td\") %>%\n    html_text2()\n  \n  if (length(value) == 0) NA_character_ else value\n}\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- mpsz %>%\n  mutate(\n    REGION_N = map_chr(Description, extract_kml_field, \"REGION_N\"),\n    PLN_AREA_N = map_chr(Description, extract_kml_field, \"PLN_AREA_N\"),\n    SUBZONE_N = map_chr(Description, extract_kml_field, \"SUBZONE_N\"),\n    SUBZONE_C = map_chr(Description, extract_kml_field, \"SUBZONE_C\")\n  ) %>%\n  select(-Name, -Description) %>%\n  relocate(geometry, .after = last_col())\n```\n:::\n\n\nYou can examine the content of `mpsz` by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 332 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 10 features:\n         REGION_N    PLN_AREA_N           SUBZONE_N SUBZONE_C\n1  CENTRAL REGION   BUKIT MERAH          DEPOT ROAD    BMSZ12\n2  CENTRAL REGION   BUKIT MERAH         BUKIT MERAH    BMSZ02\n3  CENTRAL REGION        OUTRAM           CHINATOWN    OTSZ03\n4  CENTRAL REGION DOWNTOWN CORE             PHILLIP    DTSZ04\n5  CENTRAL REGION DOWNTOWN CORE       RAFFLES PLACE    DTSZ05\n6  CENTRAL REGION        OUTRAM        CHINA SQUARE    OTSZ04\n7  CENTRAL REGION   BUKIT MERAH         TIONG BAHRU    BMSZ10\n8  CENTRAL REGION DOWNTOWN CORE    BAYFRONT SUBZONE    DTSZ12\n9  CENTRAL REGION   BUKIT MERAH TIONG BAHRU STATION    BMSZ04\n10 CENTRAL REGION DOWNTOWN CORE       CLIFFORD PIER    DTSZ06\n                         geometry\n1  MULTIPOLYGON Z (((103.8145 ...\n2  MULTIPOLYGON Z (((103.8221 ...\n3  MULTIPOLYGON Z (((103.8438 ...\n4  MULTIPOLYGON Z (((103.8496 ...\n5  MULTIPOLYGON Z (((103.8525 ...\n6  MULTIPOLYGON Z (((103.8486 ...\n7  MULTIPOLYGON Z (((103.8311 ...\n8  MULTIPOLYGON Z (((103.8589 ...\n9  MULTIPOLYGON Z (((103.8283 ...\n10 MULTIPOLYGON Z (((103.8552 ...\n```\n\n\n:::\n:::\n\n\nNotice that only the first ten records will be displayed. Do you know why?\n\n### Importing Attribute Data into R\n\nNext, we will import *respopagesextod2024.csv* file into RStudio and save the file into an tibble dataframe called *popdata*.\n\nThe task will be performed by using *read_csv()* function of **readr** package as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata <- read_csv(\"chap02/data/aspatial/respopagesextod2024.csv\")\n```\n:::\n\n\n### Data Preparation\n\nBefore a thematic map can be prepared, you are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\n-   YOUNG: age group 0 to 4 until age groyup 20 to 24,\n-   ECONOMY ACTIVE: age group 25-29 until age group 60-64,\n-   AGED: age group 65 and above,\n-   TOTAL: all age group, and\n-   DEPENDENCY: the ratio between young and aged against economy active group\n\n#### Data wrangling\n\nThe following data wrangling and transformation functions will be used:\n\n-   *pivot_wider()* of **tidyr** package, and\n-   *mutate()*, *filter()*, *group_by()* and *select()* of **dplyr** package\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2024 <- popdata %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n```\n:::\n\n\n#### Joining the attribute data and geospatial data\n\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2024 <- popdata2024 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n```\n:::\n\n\nNext, *left_join()* of **dplyr** is used to join the geographical data and attribute table using planning subzone name e.g. *SUBZONE_N* and *SZ* as the common identifier.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_pop2024 <- left_join(mpsz, popdata2024,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n```\n:::\n\n\nThing to learn from the code chunk above:\n\n-   *left_join()* of **dplyr** package is used with `mpsz` simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(mpsz_pop2024, \"chap02/data/rds/mpsz_pop2024.rds\")\n```\n:::\n\n\n## Choropleth Mapping Geospatial Data Using *tmap*\n\nChoropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\n\nTwo approaches can be used to prepare thematic map using *tmap*, they are:\n\n-   Plotting a thematic map quickly by using *qtm()*.\n-   Plotting highly customisable thematic map by using tmap elements.\n\n### Plotting a choropleth map quickly by using *qtm()*\n\nThe easiest and quickest to draw a choropleth map using **tmap** is using *qtm()*. It is concise and provides a good default visualisation in many cases.\n\nThe code chunk below will draw a cartographic standard choropleth map as shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\nqtm(mpsz_pop2024, \n    fill = \"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](chap02_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nThings to learn from the code chunk above:\n\n-   *tmap_mode()* with \"plot\" option is used to produce a static map. For interactive mode, \"view\" option should be used.\n-   *fill* argument is used to map the attribute (i.e. DEPENDENCY)\n\n### Creating a choropleth map by using *tmap*'s elements\n\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of *qtm()* is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, **tmap**'s drawing elements should be used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\", \n                n = 5,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                title = \"Dependency ratio\")) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone\") +\n  tm_layout(frame = TRUE) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scalebar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](chap02_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nIn the following sub-section, we will share with you tmap functions that used to plot these elements.\n\n#### Drawing a base map\n\nThe basic building block of **tmap** is `tm_shape()` followed by one or more layer elemments such as `tm_polygons()`, `tm_symbols()`, `tm_lines()`, `tm_raster()` and `tm_text()`.\n\nIn the code chunk below, `tm_shape()` is used to define the input data (i.e *mpsz_pop2024*) and `tm_polygons()` is used to draw the planning subzone polygons\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2024) +\n  tm_polygons()\n```\n\n::: {.cell-output-display}\n![](chap02_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\nBy default, it plots areas of polygons in light gray (gray85) and polygons borders in slightly dark gray (gray25).\n:::\n\n#### Drawing a choropleth map using `tm_polygons()`\n\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as *Dependency* to *tm_polygons()*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2024)+\n  tm_polygons(fill = \"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](chap02_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nThings to learn from *tm_polygons()*:\n\n-   The default interval binning used to draw the choropleth map is called \"pretty\". A detailed discussion of the data classification methods supported by **tmap** will be provided in sub-section 4.3.\n-   The default colour scheme used is `blues3` of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\n-   By default, Missing value will be shaded in grey.\n\n#### Drawing a choropleth map using *tm_fill()* and \\*tm_border()\\*\\*\n\nActually, `tm_polygons()` is a wraper of `tm_fill()` and `tm_border()`. `tm_fill()` shades the polygons by using the default colour scheme and `tm_borders()` adds the borders of the polygon features onto the choropleth map.\n\nThe code chunk below draws a choropleth map by using `tm_fill()` alone.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2024)+\n  tm_fill(\"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](chap02_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nNotice that the planning subzones are shared according to the respective dependecy values\n\nTo add the boundary of the planning subzones, `tm_borders()` will be used as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2024)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders()\n```\n\n::: {.cell-output-display}\n![](chap02_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nNotice that light-gray border lines have been added on the choropleth map.\n\nThe `fill_alpha` argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\n\nBeside `fill_alpha` argument, there are three other arguments for `tm_borders()`, they are:\n\n-   `col` = border colour,\n-   `lwd` = border line width. The default is 1, and\n-   `lty` = border line type. The default is \"solid\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2024)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(col = \"grey60\",\n             lwd = 0.1,\n             lty = \"dashed\")\n```\n\n::: {.cell-output-display}\n![](chap02_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n### Data classification methods of **tmap**\n\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\n\n**tmap** provides a total ten data classification methods, namely: *fixed*, *sd*, *equal*, *pretty* (default), *quantile*, *kmeans*, *hclust*, *bclust*, *fisher*, and *jenks*.\n\nTo define a data classification method, the *style* argument of *tm_fill()* or *tm_polygons()* will be used.\n\n#### Plotting choropleth maps with built-in classification methods\n\nThe code chunk below shows a quantile data classification that used 5 classes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](chap02_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\nIn the code chunk below, *equal* data classification method is used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"equal\",\n                n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](chap02_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\nNotice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.\n\n> **Warning: Maps Lie!**\n\n> DIY: Using what you had learned, prepare choropleth maps by using different classification methods supported by tmap and compare their differences.\n\n> DIY: Preparing choropleth maps by using similar classification method but with different numbers of classes (i.e. 2, 6, 10, 20). Compare the output maps, what observation can you draw?\n\n#### Plotting choropleth map with custome break\n\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the `breaks` argument to the `tm_scale_intervals()`. It is important to note that, in **tmap** the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the `breaks` option (the values must be in increasing order).\n\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of *DEPENDENCY* field.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mpsz_pop2024$DEPENDENCY)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1905  0.7450  0.8377  0.8738  0.9366 12.7500      94 \n```\n\n\n:::\n:::\n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our `breaks` vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\n\nNow, we will plot the choropleth map by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2024)+\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00))) +\n  tm_borders(fill_alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](chap02_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n### Colour Scheme\n\n**tmap** supports colour ramps either defined by the user or a set of predefined colour ramps from the **RColorBrewer** package.\n\n#### Using ColourBrewer palette\n\nTo change the colour, we assign the preferred colour to *palette* argument of *values* as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"brewer.greens\")) +\n  tm_borders(fill_alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](chap02_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\nNotice that the choropleth map is shaded in green.\n\nTo reverse the colour shading, add a \"-\" prefix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"-brewer.greens\")) +\n  tm_borders(fill_alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](chap02_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\nNotice that the colour scheme has been reversed.\n\n#### Cartographic Furniture\n\nBeside map style, **tmap** also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\n\nIn the code chunk below, `tm_compass()`, `tm_scale_bar()`, `tm_grid()` and `tm_credit()` are used to add compass, scale bar, grid lines and data sources onto the choropleth map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5)) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scalebar() +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: data.gov.sg & singstat\",\n             position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](chap02_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n### Map Layout\n\nMap layout refers to the combination of all map elements into a cohensive map. It includes the map background, frame, typography, scale, aspect ratio, margins, and more.\n\nWe can customize the map layout using the `tm_layout()` function. In this section, we cover the most often used arguments of this function using the dependency choropleth map as example.\n\n#### Map Legend\n\nIn **tmap**, several *legend* options are provided to change the placement, format and appearance of the legend.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5),\n              fill.legend = tm_legend(\n                title = \"Dependency ration\")) +\n  tm_pos_auto_in() +\n  tm_borders(fill_alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scalebar() +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: data.gov.sg & singstat\",\n             position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](chap02_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n#### Map style\n\n**tmap** allows a wide variety of layout settings to be changed. They can be called by using *tmap_style()*.\n\nThe code chunk below shows the *classic* style is used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2024)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n```\n\n::: {.cell-output-display}\n![](chap02_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\nTo reset the default style, refer to the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_style(\"white\")\n```\n:::\n\n\n### Drawing Small Multiple Choropleth Maps\n\n**Small multiple maps**, also referred to as **facet maps**, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\n\nIn **tmap**, small multiple maps can be plotted in three ways:\n\n-   by assigning multiple values to at least one of the asthetic arguments,\n-   by defining a group-by variable in *tm_facets()*, and\n-   by creating multiple stand-alone maps with *tmap_arrange()*.\n\n#### By assigning multiple values to at least one of the aesthetic arguments\n\nIn this example, small multiple choropleth maps are created by defining ***ncols*** in **tm_fill()**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2024)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n```\n\n::: {.cell-output-display}\n![](chap02_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2024)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](chap02_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n#### By defining a group-by variable in *tm_facets()*\n\nIn this example, multiple small choropleth maps are created by using **tm_facets()**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2024) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](chap02_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n#### By creating multiple stand-alone maps with *tmap_arrange()*\n\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with **tmap_arrange()**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyoungmap <- tm_shape(mpsz_pop2024)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2024)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](chap02_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n### Mappping Spatial Object Meeting a Selection Criterion\n\nInstead of creating small multiple choropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2024[mpsz_pop2024$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](chap02_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n## Reference\n\n### All about **tmap** package\n\n-   [tmap: Thematic Maps in R](https://www.jstatsoft.org/article/view/v084i06)\n-   [tmap](https://cran.r-project.org/web/packages/tmap/index.html)\n-   [tmap: get started!](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html)\n-   [tmap: changes in version 2.0](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-changes-v2.html)\n-   [tmap: creating thematic maps in a flexible way (useR!2015)](http://von-tijn.nl/tijn/research/presentations/tmap_user2015.pdf)\n-   [Exploring and presenting maps with tmap (useR!2017)](http://von-tijn.nl/tijn/research/presentations/tmap_user2017.pdf)\n\n### Geospatial data wrangling\n\n-   [sf: Simple Features for R](https://cran.r-project.org/web/packages/sf/index.html)\n-   [Simple Features for R: StandardizedSupport for Spatial Vector Data](https://journal.r-project.org/archive/2018/RJ-2018-009/RJ-2018-009.pdf)\n-   [Reading, Writing and Converting Simple Features](https://cran.r-project.org/web/packages/sf/vignettes/sf2.html)\n\n### Data wrangling\n\n-   [dplyr](https://dplyr.tidyverse.org/)\n-   [Tidy data](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html)\n-   [tidyr: Easily Tidy Data with 'spread()' and 'gather()' Functions](https://cran.r-project.org/web/packages/tidyr/tidyr.pdf)\n\n\n::: {.cell}\n\n:::\n\n",
    "supporting": [
      "chap02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
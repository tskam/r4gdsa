{
  "hash": "2de710af260e8bb0073972bb5e8e369b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Local Measures of Spatial Autocorrelation\"\ndate: \"January 25, 2023\"\ndate-modified: \"last-modified\"\nformat: html\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\neditor: visual\n---\n\n## Overview\n\nLocal Measures of Spatial Autocorrelation (LMSA) focus on the relationships between each observation and its surroundings, rather than providing a single summary of these relationships across the map. In this sense, they are not summary statistics but scores that allow us to learn more about the spatial structure in our data. The general intuition behind the metrics however is similar to that of global ones. Some of them are even mathematically connected, where the global version can be decomposed into a collection of local ones. One such example are Local Indicators of Spatial Association (LISA). Beside LISA, Getis-Ord's Gi-statistics will be introduce as an alternative LMSA statistics that present complementary information or allow us to obtain similar insights for geographically referenced data.\n\nIn this hands-on exercise, you will learn how to compute Local Measures of Spatial Autocorrelation (LMSA) by using [**sfdep**](https://sfdep.josiahparry.com/) package. By the end to this hands-on exercise, you will be able to:\n\n-   import geospatial data using appropriate function(s) of **sf** package,\n-   import csv file using appropriate function of **readr** package,\n-   perform relational join using appropriate join function of **dplyr** package,\n-   compute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions **sfdep** package;\n-   compute Getis-Ord's Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of **sfdep** package; and\n-   to visualise the analysis output by using **tmap** package.\n\n## Getting Started\n\n### The analytical question\n\nIn spatial policy, one of the main development objective of the local govenment and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is **No**. Then, our next question will be \"is there sign of spatial clustering?\". And, if the answer for this question is yes, then our next question will be \"where are these clusters?\"\n\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China.(https://en.wikipedia.org/wiki/Hunan)\n\n### The Study Area and Data\n\nTwo data sets will be used in this hands-on exercise, they are:\n\n-   Hunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\n-   Hunan_2012.csv: This csv file contains selected Hunan's local development indicators in 2012.\n\n### Setting the Analytical Toolls\n\nBefore we get started, we need to ensure that **sf**, **sfdep**, **tmap** and **tidyverse** packages of R are currently installed in your R.\n\n-   sf is use for importing and handling geospatial data in R,\n-   tidyverse is mainly use for wrangling attribute data in R,\n-   sfdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and\n-   tmap will be used to prepare cartographic quality choropleth map.\n\nThe code chunk below is used to perform the following tasks:\n\n-   creating a package list containing the necessary R packages,\n-   checking if the R packages in the package list have been installed in R,\n    -   if they have yet to be installed, RStudio will installed the missing packages,\n-   launching the packages into R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, sfdep, tmap, tidyverse)\n```\n:::\n\n\n## Getting the Data Into R Environment\n\nIn this section, you will learn how to bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\n### Import shapefile into r environment\n\nThe code chunk below uses [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package to import Hunan shapefile into R. The imported shapefile will be **simple features** Object of **sf**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan <- st_read(dsn = \"chap10/data/geospatial\", \n                 layer = \"Hunan\") %>% \n  st_transform(crs = 32650)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Hunan' from data source `C:\\tskam\\r4gdsa\\chap10\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n::: callout-tip\nThe raw data is in WGS 84 geographic coordinates system. For geospatial analysis, it is appropriate to use projected coordinates system. In the code chunk above, `st_transform()` is used to transform Hunan geospatial data from WGS 84 to UTM zone 50N (i.e. EPSG: 32650).\n:::\n\n### Import csv file into r environment\n\nNext, we will import *Hunan_2012.csv* into R by using *read_csv()* of **readr** package. The output is R data frame class.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan2012 <- read_csv(\"chap10/data/aspatial/Hunan_2012.csv\")\n```\n:::\n\n\n### Performing relational join\n\nThe code chunk below will be used to update the attribute table of *hunan's* sf data frame with the attribute fields of *hunan2012* dataframe. This is performed by using *left_join()* of **dplyr** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan <- left_join(hunan,hunan2012) %>%\n  select(1:4, 7, 15)\n```\n:::\n\n\n### Visualising Regional Development Indicator\n\nIn the code chunks below, tmap functions are used:\n\n-   to build two choropleth maps by using equal interval (i.e equal) and quantile (i.e. quantile) classification methods, and\n-   to plot both maps next to each other by using `tmap_arrange()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nequal <- tm_shape(hunan) +\n  tm_polygons(fill = \"GDPPC\",\n              fill.scale = tm_scale_intervals(\n                style = \"equal\",\n                n = 5,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                title = \"GDPPC\",\n                position = tm_pos_in(\n                  \"left\", \"bottom\"))) + \n  tm_borders(fill_alpha = 0.5) +\n  tm_title(\"Equal interval classification\")\n\nquantile <- tm_shape(hunan) +\n  tm_polygons(fill = \"GDPPC\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                title = \"GDPPC\",\n                position = tm_pos_in(\n                  \"left\", \"bottom\"))) + \n  tm_borders(fill_alpha = 0.5) +\n  tm_title(\"Quantile interval classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n```\n\n::: {.cell-output-display}\n![](chap10_files/figure-html/unnamed-chunk-5-1.png){width=1152}\n:::\n:::\n\n\n::: callout-important\n-   Does the plot above reveal any outliers or clusters?\n-   Does the plot above indicate the presence of hot spots or cold spots?\n:::\n\n## Local Indicators of Spatial Association(LISA)\n\nLocal Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters and/or outliers in the spatial arrangement of a given variable. For instance if we are studying distribution of GDP per capita of Hunan Provice, People Republic of China, local clusters in GDP per capita mean that there are counties that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.\n\nIn this section, you will learn how to apply appropriate Local Indicators for Spatial Association (LISA), especially local Moran'I to detect cluster and/or outlier from GDP per capita 2012 of Hunan Province, PRC.\n\n### Computing Contiguity Spatial Weights\n\nBefore we can compute the local spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\n\nIn the code chunk below, [`st_contiguity()`](https://sfdep.josiahparry.com/reference/st_contiguity) of **sfdep** package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a \"queen\" argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don't specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\n\nNext, [`st_weights()`](https://sfdep.josiahparry.com/reference/st_weights) is used to calculate polygon spatial weights from the *nb* list.\n\n`st_weights()` provides three arguments, they are:\n\n-   nb: A neighbor list object as created by `st_neighbors()`.\n-   style: Default “W” for row standardized weights. This value can also be “B”, “C”, “U”, “minmax”, and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\n-   allow_zero: If TRUE, assigns zero as lagged value to zone without neighbors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q <- hunan %>%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(\n           nb, style = \"W\"),\n         .before = 1) \n```\n:::\n\n\n::: callout-tip\nIn the code chunk above, `mutate()` is used to write the computed nb and wt values back into *hunan* sf data table.\n:::\n\nTo reveal the neighbour list, code chunk below is used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(wm_q$nb)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n```\n\n\n:::\n:::\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbour.\n\n### Row-standardised weights matrix\n\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=\"W\"). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors' values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we'll stick with the style=\"W\" option for simplicity's sake but note that other more robust options are available, notably style=\"B\".\n\n::: callout-note\n### What can we learn from the code chunk above?\n\n-   The input of [`nb2listw()`](https://r-spatial.github.io/spdep/reference/nb2listw.html) must be an object of class **nb**. The syntax of the function has two major arguments, namely style and zero.poly.\n-   *style* can take values \"W\", \"B\", \"C\", \"U\", \"minmax\" and \"S\". B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\n-   If *zero policy* is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %\\*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.\n:::\n\n### Computing local Moran's I\n\nTo compute local Moran's I, the [*local_moran()*](https://sfdep.josiahparry.com/reference/local_moran) function of **sfdep** will be used. It computes *Ii* values, given a set of *zi* values and a listw object providing neighbour weighting information for the polygon associated with the zi values.\n\nThe code chunks below are used to compute local Moran's I of *GDPPC2012* at the county level.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa <- wm_q %>% \n  mutate(local_moran = local_moran(\n    GDPPC, nb, wt, nsim = 99),\n         .before = 1) %>%\n  unnest(local_moran)\n```\n:::\n\n\n*local_moran()* function returns a matrix of values whose columns are:\n\n-   Ii: the local Moran's I statistics\n-   E.Ii: the expectation of local moran statistic under the randomisation hypothesis\n-   Var.Ii: the variance of local moran statistic under the randomisation hypothesis\n-   Z.Ii:the standard deviate of local moran statistic\n-   Pr(): the p-value of local moran statistic\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(lisa)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 88\nColumns: 21\n$ ii           <dbl> -1.468468e-03, 2.587817e-02, -1.198765e-02, 1.022468e-03,…\n$ eii          <dbl> 1.055854e-04, 2.874295e-03, -2.251232e-02, -3.257456e-05,…\n$ var_ii       <dbl> 4.600084e-04, 9.913986e-03, 9.207982e-02, 4.414091e-06, 1…\n$ z_ii         <dbl> -0.07338993, 0.23103454, 0.03468377, 0.50216820, 0.349012…\n$ p_ii         <dbl> 0.9414958277, 0.8172879719, 0.9723319034, 0.6155492085, 0…\n$ p_ii_sim     <dbl> 0.76, 0.98, 0.82, 0.54, 0.60, 0.72, 0.06, 0.16, 0.02, 0.0…\n$ p_folded_sim <dbl> 0.38, 0.49, 0.41, 0.27, 0.30, 0.36, 0.03, 0.08, 0.01, 0.0…\n$ skewness     <dbl> -0.9148345, -0.9791580, 0.8830241, 0.7801455, 1.1294778, …\n$ kurtosis     <dbl> 0.09531721, 1.16980672, 0.90329656, -0.10106105, 1.268702…\n$ mean         <fct> Low-High, Low-Low, High-Low, High-High, High-High, High-L…\n$ median       <fct> High-High, High-High, High-High, High-High, High-High, Hi…\n$ pysal        <fct> Low-High, Low-Low, High-Low, High-High, High-High, High-L…\n$ nb           <nb> <2, 3, 4, 57, 85>, <1, 57, 58, 78, 85>, <1, 4, 5, 85>, <1,…\n$ wt           <list> <0.2, 0.2, 0.2, 0.2, 0.2>, <0.2, 0.2, 0.2, 0.2, 0.2>, <0…\n$ NAME_2       <chr> \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"C…\n$ ID_3         <int> 21098, 21100, 21101, 21102, 21103, 21104, 21109, 21110, 2…\n$ NAME_3       <chr> \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", …\n$ ENGTYPE_3    <chr> \"County\", \"County\", \"County City\", \"County\", \"County\", \"C…\n$ County       <chr> \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", …\n$ GDPPC        <dbl> 23667, 20981, 34592, 24473, 25554, 27137, 63118, 62202, 7…\n$ geometry     <POLYGON [m]> POLYGON ((22320.48 3301894,..., POLYGON ((35522.9…\n```\n\n\n:::\n:::\n\n\n#### Mapping the local Moran's I\n\n#### Mapping local Moran's I values\n\nUsing choropleth mapping functions of **tmap** package, we can plot the local Moran's I values by using the code chinks below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(lisa) +\n  tm_polygons(fill = \"ii\",\n              fill.scale = tm_scale_intervals(\n                style = \"pretty\",\n                n = 5,\n                values = \"brewer.RdBu\"),\n              fill.legend = tm_legend(\n                title = \"Local Morans'I\",\n                position = tm_pos_in(\n                  \"left\", \"bottom\"))) + \n  tm_borders(fill_alpha = 0.5) +\n  tm_title(\"Loal Morans'I of GDPPC (Queen's method)\")\n```\n\n::: {.cell-output-display}\n![](chap10_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n#### Mapping local Moran's I p-values\n\nThe choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as consider above.\n\nThe code chunks below produce a choropleth map of Moran's I p-values by using functions of **tmap** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(lisa) +\n  tm_polygons(fill = \"p_ii\", \n              fill.scale = tm_scale_intervals(\n                breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n                values = \"-brewer.Reds\"),\n              fill.legend = tm_legend(\n                title = \"p-value\",\n      position = tm_pos_in(\"left\", \"bottom\")\n    )) + \n  tm_borders(fill_alpha = 0.5) +\n  tm_title(\"p-values of Loal Moran's I of GDPPC (Queen's method)\")\n```\n\n::: {.cell-output-display}\n![](chap10_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n#### Mapping both local Moran's I values and p-values\n\nFor effective interpretation, it is better to plot both the local Moran's I values map and its corresponding p-values map next to each other.\n\nThe code chunk below will be used to create such visualisation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nii.map <- tm_shape(lisa) +\n  tm_polygons(fill = \"ii\",\n              fill.scale = tm_scale_intervals(\n                style = \"pretty\",\n                n = 5,\n                values = \"brewer.RdBu\"),\n              fill.legend = tm_legend(\n                title = \"Local Moran's I\",\n                position = tm_pos_in(\n                  \"left\", \"bottom\"))) + \n  tm_borders(fill_alpha = 0.5) +\n  tm_title(\"Loal Moran's I of GDPPC (Queen's method)\")\n\np_ii.map <- tm_shape(lisa) +\n  tm_polygons(fill = \"p_ii\", \n              fill.scale = tm_scale_intervals(\n                breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n                values = \"-brewer.Reds\"),\n              fill.legend = tm_legend(\n                title = \"p-value\",\n      position = tm_pos_in(\"left\", \"bottom\")\n    )) + \n  tm_borders(fill_alpha = 0.5) +\n  tm_title(\"p-values of Loal Moran's I of GDPPC (Queen's method)\")\n\ntmap_arrange(ii.map, p_ii.map, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](chap10_files/figure-html/unnamed-chunk-12-1.png){width=1152}\n:::\n:::\n\n\n## Creating a LISA Cluster Map\n\nThe LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.\n\n### Plotting Moran scatterplot\n\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\n\nThe code chunk below plots the Moran scatterplot of GDPPC 2012 by using [*moran.plot()*](https://r-spatial.github.io/spdep/reference/moran.plot.html) of **spdep**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa <- lisa %>%\n  mutate(lag_GDPPC = st_lag(\n    GDPPC, nb, wt),\n    .before = 1) %>%\n  unnest(lag_GDPPC)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = lisa, \n       aes(x = GDPPC, \n           y = lag_GDPPC)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", \n              se = FALSE, \n              color = \"red\") +\n  labs(x = \"GDPPC\",\n       y = \"Spatial Lag of GDPPC\",\n       title = \"Moran Scatterplot\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](chap10_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = lisa, \n       aes(x = GDPPC, \n           y = lag_GDPPC, \n           color = mean)) +\n  geom_point(size = 2) +\n  geom_smooth(method = \"lm\", \n              se = FALSE, \n              color = \"black\") +\n  geom_hline(yintercept=mean(lisa$lag_GDPPC), lty=2) + \n    geom_vline(xintercept=mean(lisa$GDPPC), lty=2) +\n  scale_color_manual(\n    values = c(\"High-High\" = \"red\", \n               \"Low-Low\" = \"blue\",\n               \"Low-High\" = \"lightblue\", \n               \"High-Low\" = \"pink\")) +\n  labs(x = \"GDPPC\",\n       y = \"Spatial Lag of GDPPC\",\n       title = \"Moran Scatterplot with LISA Quadrants\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](chap10_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nNotice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. This are the high-high locations in the lesson slide.\n\n### Plotting Moran scatterplot with standardised variable\n\nFirst we will use [*scale()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/scale) to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa <- lisa %>%\n  mutate(z_GDPPC = scale(GDPPC),\n         z_lag_GDPPC = scale(lag_GDPPC),\n         .before = 1)\n```\n:::\n\n\nThe [*as.vector()*](https://www.rdocumentation.org/packages/pbdDMAT/versions/0.5-1/topics/as.vector) added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.\n\nNow, we are ready to plot the Moran scatterplot again by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = lisa, \n       aes(x = z_GDPPC, \n           y = z_lag_GDPPC, \n           color = mean)) +\n  geom_point(size = 2) +\n  geom_smooth(method = \"lm\", \n              se = FALSE, \n              color = \"black\") +\n  geom_hline(yintercept=mean(lisa$z_lag_GDPPC), lty=2) + \n    geom_vline(xintercept=mean(lisa$z_GDPPC), lty=2) +\n  scale_color_manual(\n    values = c(\"High-High\" = \"red\", \n               \"Low-Low\" = \"blue\",\n               \"Low-High\" = \"lightblue\", \n               \"High-Low\" = \"pink\")) +\n  labs(x = \"Standardised GDPPC\",\n       y = \"Standardised Spatial Lag of GDPPC\",\n       title = \"Standardised Moran Scatterplot with LISA Quadrants\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](chap10_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n### Preparing LISA map classes\n\nThe code chunks below show the steps to prepare a LISA cluster map.\n\nNext, derives the spatially lagged variable of interest (i.e. GDPPC) and centers the spatially lagged variable around its mean.\n\nThis is follow by centering the local Moran's around the mean.\n\nNext, we will set a statistical significance level for the local Moran.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsignif <- 0.05       \n```\n:::\n\n\nThese four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.\n\nLastly, places non-significant Moran in the category 0.\n\nIn fact, we can combined all the steps into one single code chunk as shown below:\n\n### Plotting LISA map\n\nNow, we can build the LISA map by using the code chunks below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa <- lisa %>%\n  mutate(\n    LISA_cluster = ifelse(\n      p_ii < 0.05,\n      as.character(mean),              # keep original \"High-High\", etc.\n      \"Insignificant\"     # match capitalisation style\n    ),\n    LISA_cluster = factor(\n      LISA_cluster,\n      levels = c(\"Insignificant\", \"Low-Low\", \"Low-High\", \"High-Low\", \"High-High\")\n    )\n  )\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(lisa) +\n  tm_polygons(\n    fill = \"LISA_cluster\",\n    fill.scale = tm_scale_categorical(\n      values = c(\n        \"grey80\",      # Insignificant\n        \"blue\",        # Low-Low\n        \"lightblue\",   # Low-High\n        \"pink\",        # High-Low\n        \"red\"          # High-High\n      )\n    ),\n    fill.legend = tm_legend(title = \"LISA Cluster\")\n  ) +\n  tm_borders() +\n  tm_title(\"Local Moran's I Clusters (p < 0.05)\")\n```\n\n::: {.cell-output-display}\n![](chap10_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\nFor effective interpretation, it is better to plot both the local Moran's I values map and its corresponding p-values map next to each other.\n\nThe code chunk below will be used to create such visualisation.\n\nWe can also include the local Moran's I map and p-value map as shown below for easy comparison.\n\n\n::: {.cell}\n\n:::\n\n\n> Question: What statistical observations can you draw from the LISA map above?\n\n## Hot Spots and Cold Spots Analysis (HCSA)\n\nHot spots and cold spots analysis is a technique used in spatial statistics to identify statistically significant clusters of high values (hot spots) and low values (cold spots) within a dataset. These analyses help visualize and understand spatial patterns, revealing areas where data points are clustered more densely than would be expected by random chance\n\nThe term hot spots refer to areas where high values are concentrated and surrounded by other high values. For example, a hot spot analysis might reveal clusters of high GDP per capita in a province, indicating areas with significantly higher GDP per capita than other parts of the province.\n\nOn the other hands, the term cold spots refer to areas where low values are concentrated and surrounded by other low values. An example could be clusters of low GDP per capita, indicating areas where GDP per capita is consistently low.\n\nThe term 'hot spot' has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).\n\nHCSA uses statistical methods, like the Getis-Ord Gi\\* statistic, to determine if the observed clustering is statistically significant or could have occurred randomly.\n\nThe analysis consists of three steps:\n\n-   Deriving spatial weight matrix\n-   Computing Gi\\* statistics\n-   Mapping Gi\\* statistics\n-   Communicating the analysis results\n\n### Deriving fixed distance weight matrix\n\nWhist the spatial autocorrelation considered units which shared borders, for Getis-Ord Gi\\* statistics, we are defining neighbours based on distance.\n\nThere are two type of distance-based proximity matrix, they are:\n\n-   fixed distance weight matrix; and\n-   adaptive distance weight matrix.\n\nIn this section, you will learn how to compute fixed distance weight matrix by using `st_dist_band()` and `st_weights()` of sfdep package.\n\n#### Determine the cut-off distance\n\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nct <- critical_threshold(st_geometry(hunan))\nct\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 60799.91\n```\n\n\n:::\n:::\n\n\nThe summary report shows that the largest first nearest neighbour distance is 60.80 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\nUsing the critical threshold value computed above, code chunl below is used to compute the fixed distance weight.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_fd <- hunan %>% \n  mutate(nb = include_self(\n    st_dist_band(\n      st_geometry(geometry), \n                 upper = ct)),\n    wts = st_weights(nb, \n                      style = \"W\"),\n    .before = 1) \n```\n:::\n\n\n::: callout-note\nNoted that for Gi\\* `include_self()` must be used to endure that ![](chap10/images/img1.jpg){width=\"70\"}.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA_fdw <- wm_fd %>% \n  mutate(local_Gi = local_gstar_perm(\n    GDPPC, nb, wts, nsim = 99),\n         .before = 1) %>%\n  unnest(local_Gi)\nHCSA_fdw\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 88 features and 18 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -316283 ymin: 2735534 xmax: 230955.3 ymax: 3349137\nProjected CRS: WGS 84 / UTM zone 50N\n# A tibble: 88 × 19\n   gi_star cluster   e_gi     var_gi std_dev p_value p_sim p_folded_sim skewness\n     <dbl> <fct>    <dbl>      <dbl>   <dbl>   <dbl> <dbl>        <dbl>    <dbl>\n 1  0.383  Low     0.0114 0.00000542   0.448 6.54e-1  0.72         0.36    1.00 \n 2 -0.273  Low     0.0115 0.0000102   -0.324 7.46e-1  0.9          0.45    1.38 \n 3  0.364  High    0.0119 0.00000557   0.293 7.70e-1  0.64         0.32    0.691\n 4  0.411  High    0.0119 0.00000876   0.237 8.13e-1  0.76         0.38    0.776\n 5  0.217  High    0.0111 0.00000626   0.337 7.36e-1  0.68         0.34    0.846\n 6 -0.0594 High    0.0117 0.00000762  -0.180 8.57e-1  0.92         0.46    0.915\n 7  4.91   High    0.0206 0.0000145    3.88  1.05e-4  0.06         0.04    2.21 \n 8  3.54   High    0.0150 0.00000614   2.88  4.00e-3  0.04         0.02    0.545\n 9  5.81   High    0.0154 0.00000642   5.36  8.12e-8  0.02         0.01    1.18 \n10 -0.195  Low     0.0105 0.00000821   0.122 9.03e-1  0.72         0.36    1.18 \n# ℹ 78 more rows\n# ℹ 10 more variables: kurtosis <dbl>, nb <nb>, wts <list>, NAME_2 <chr>,\n#   ID_3 <int>, NAME_3 <chr>, ENGTYPE_3 <chr>, County <chr>, GDPPC <dbl>,\n#   geometry <POLYGON [m]>\n```\n\n\n:::\n:::\n\n\n#### Mapping HCSA\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(HCSA_fdw) +\n  tm_polygons(fill = \"gi_star\",\n              fill.scale = tm_scale_intervals(\n                style = \"pretty\",\n                n = 6,\n                values = \"brewer.rd_bu\"),\n              fill.legend = tm_legend(\n                title = \"Gi*\",\n                position = tm_pos_in(\n                  \"left\", \"bottom\"))) + \n  tm_borders(fill_alpha = 0.5) +\n  tm_title(\"Gi* of GDPPC (Fixed Bandwidth d = 60799.91m)\")\n```\n\n::: {.cell-output-display}\n![](chap10_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n#### Mapping local Moran's I p-values\n\nThe choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as consider above.\n\nThe code chunks below produce a choropleth map of Moran's I p-values by using functions of **tmap** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(lisa) +\n  tm_polygons(fill = \"p_ii\", \n              fill.scale = tm_scale_intervals(\n                breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n                values = \"-brewer.Reds\"),\n              fill.legend = tm_legend(\n                title = \"p-value\",\n      position = tm_pos_in(\"left\", \"bottom\")\n    )) + \n  tm_borders(fill_alpha = 0.5) +\n  tm_title(\"p-values of Loal Moran's I of GDPPC (Queen's method)\")\n```\n\n::: {.cell-output-display}\n![](chap10_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n#### Mapping both local Moran's I values and p-values\n\nFor effective interpretation, it is better to plot both the local Moran's I values map and its corresponding p-values map next to each other.\n\nThe code chunk below will be used to create such visualisation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nii.map <- tm_shape(lisa) +\n  tm_polygons(fill = \"ii\",\n              fill.scale = tm_scale_intervals(\n                style = \"pretty\",\n                n = 5,\n                values = \"brewer.RdBu\"),\n              fill.legend = tm_legend(\n                title = \"Local Moran's I\",\n                position = tm_pos_in(\n                  \"left\", \"bottom\"))) + \n  tm_borders(fill_alpha = 0.5) +\n  tm_title(\"Loal Moran's I of GDPPC (Queen's method)\")\n\np_ii.map <- tm_shape(lisa) +\n  tm_polygons(fill = \"p_ii\", \n              fill.scale = tm_scale_intervals(\n                breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n                values = \"-brewer.Reds\"),\n              fill.legend = tm_legend(\n                title = \"p-value\",\n      position = tm_pos_in(\"left\", \"bottom\")\n    )) + \n  tm_borders(fill_alpha = 0.5) +\n  tm_title(\"p-values of Loal Moran's I of GDPPC (Queen's method)\")\n\ntmap_arrange(ii.map, p_ii.map, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](chap10_files/figure-html/unnamed-chunk-27-1.png){width=1152}\n:::\n:::\n\n\n### Computing adaptive distance weight matrix\n\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\n\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_knn(st_geometry(hunan), k = 8)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n```\n\n\n:::\n:::\n\n\nNext, *nb2listw()* is used to convert the nb object into spatial weights object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_ad <- hunan %>% \n  mutate(nb = include_self(\n    st_knn(\n      st_geometry(geometry), \n      k = 8)),\n    wts = st_weights(nb, \n                      style = \"W\"),\n    .before = 1) \n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA_adw <- wm_ad %>% \n  mutate(local_Gi = local_gstar_perm(\n    GDPPC, nb, wts, nsim = 99),\n         .before = 1) %>%\n  unnest(local_Gi)\nHCSA_adw\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 88 features and 18 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -316283 ymin: 2735534 xmax: 230955.3 ymax: 3349137\nProjected CRS: WGS 84 / UTM zone 50N\n# A tibble: 88 × 19\n    gi_star cluster   e_gi    var_gi std_dev p_value p_sim p_folded_sim skewness\n      <dbl> <fct>    <dbl>     <dbl>   <dbl>   <dbl> <dbl>        <dbl>    <dbl>\n 1  0.328   Low     0.0111   4.69e-6  0.455  6.49e-1  0.6          0.3     0.622\n 2  1.07    Low     0.0108   4.07e-6  1.44   1.49e-1  0.16         0.08    0.742\n 3  0.267   High    0.0118   4.12e-6  0.0825 9.34e-1  0.76         0.38    0.678\n 4  0.213   High    0.0113   5.06e-6  0.232  8.16e-1  0.78         0.39    0.449\n 5 -0.00787 High    0.0117   5.73e-6 -0.142  8.87e-1  0.92         0.46    0.493\n 6 -0.165   High    0.0111   3.67e-6 -0.0753 9.40e-1  0.96         0.48    0.598\n 7  4.52    High    0.0134   4.63e-6  3.68   2.37e-4  0.02         0.01    0.703\n 8  2.39    High    0.0133   4.93e-6  1.51   1.30e-1  0.2          0.1     0.898\n 9  4.92    High    0.0138   4.10e-6  4.14   3.41e-5  0.02         0.01    0.235\n10  1.16    Low     0.0107   4.87e-6  1.45   1.46e-1  0.26         0.13    0.697\n# ℹ 78 more rows\n# ℹ 10 more variables: kurtosis <dbl>, nb <nb>, wts <list>, NAME_2 <chr>,\n#   ID_3 <int>, NAME_3 <chr>, ENGTYPE_3 <chr>, County <chr>, GDPPC <dbl>,\n#   geometry <POLYGON [m]>\n```\n\n\n:::\n:::\n\n\n## Computing Gi statistics\n\n### Gi statistics using fixed distance\n\nThe output of localG() is a vector of G or Gstar values, with attributes \"gstari\" set to TRUE or FALSE, \"call\" set to the function call, and class \"localG\".\n\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\n\nNext, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below.\n\nIn fact, the code chunk above performs three tasks. First, it convert the output vector (i.e. *gi.fixed*) into r matrix object by using *as.matrix()*. Next, *cbind()* is used to join hunan\\@data and *gi.fixed* matrix to produce a new SpatialPolygonDataFrame called *hunan.gi*. Lastly, the field name of the gi values is renamed to *gstat_fixed* by using *rename()*.\n\n### Mapping Gi values with fixed distance weights\n\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\n> Question: What statistical observation can you draw from the Gi map above?\n\n### Gi statistics using adaptive distance\n\nThe code chunk below are used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e *knb_lw*).\n\n### Mapping Gi values with adaptive distance weights\n\nIt is time for us to visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of **tmap** package will be used to map the Gi values.\n\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\n\n::: {.cell}\n\n:::\n\n\n> Question: What statistical observation can you draw from the Gi map above?\n",
    "supporting": [
      "chap10_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
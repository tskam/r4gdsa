{
  "hash": "f2b625ec7a20df978d15ebe725f84723",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"2nd Order Spatial Point Patterns Analysis Methods\"\ndate: \"January 23, 2023\"\ndate-modified: \"last-modified\"\nformat: html\nexecute:\n  message: false\n  warning: false\n  freeze: true\neditor: visual\n---\n\n\n\n## Overview\n\nSpatial Point Pattern Analysis is the evaluation of the pattern or distribution, of a set of points on a surface. The point can be location of:\n\n-   events such as crime, traffic accident and disease onset, or\n-   business services (coffee and fastfood outlets) or facilities such as childcare and eldercare.\n\nUsing appropriate functions of [spatstat](https://cran.r-project.org/web/packages/spatstat/), this hands-on exercise aims to discover the spatial point processes of childecare centres in Singapore.\n\nThe specific questions we would like to answer are as follows:\n\n-   are the childcare centres in Singapore randomly distributed throughout the country?\\\n-   if the answer is not, then the next logical question is where are the locations with higher concentration of childcare centres?\n\n## The data\n\nTo provide answers to the questions above, three data sets will be used. They are:\n\n-   `CHILDCARE`, a point feature data providing both location and attribute information of childcare centres. It was downloaded from Data.gov.sg and is in geojson format.\n-   `MP14_SUBZONE_WEB_PL`, a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from Data.gov.sg.\n-   `CostalOutline`, a polygon feature data showing the national boundary of Singapore. It is provided by SLA and is in ESRI shapefile format.\n\n## Installing and Loading the R packages\n\nIn this hands-on exercise, five R packages will be used, they are:\n\n-   [**sf**](https://r-spatial.github.io/sf/), a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.\n-   [**spatstat**](https://spatstat.org/), which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.\n-   [**raster**](https://cran.r-project.org/web/packages/raster/) which reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format.\n-   [**maptools**](https://cran.r-project.org/web/packages/maptools/index.html) which provides a set of tools for manipulating geographic data. In this hands-on exercise, we mainly use it to convert *Spatial* objects into *ppp* format of **spatstat**.\n-   [**tmap**](https://cran.r-project.org/web/packages/tmap/index.html) which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API.\n\nUse the code chunk below to install and launch the five R packages.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, raster, spatstat, tmap, tidyverse)\n```\n:::\n\n\n\n## Spatial Data Wrangling\n\n### Importing the spatial data\n\nIn this section, [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package will be used to import these three geospatial data sets into R.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare_sf <- st_read(\"chap05/data/child-care-services-geojson.geojson\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `child-care-services-geojson' from data source \n  `D:\\tskam\\r4gdsa\\chap05\\data\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nsg_sf <- st_read(dsn = \"chap05/data\", layer=\"CostalOutline\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `CostalOutline' from data source `D:\\tskam\\r4gdsa\\chap05\\data' using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n```\n\n\n:::\n\n```{.r .cell-code}\nmpsz_sf <- st_read(dsn = \"chap05/data\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source `D:\\tskam\\r4gdsa\\chap05\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\n\nBefore we can use these data for analysis, it is important for us to ensure that they are projected in same projection system.\n\n> DIY: Using the appropriate **sf** function you learned in Hands-on Exercise 2, retrieve the referencing system information of these geospatial data.\n\n\n\n::: {.cell}\n\n:::\n\n\n\nNotice that except `childcare_sf`, both `mpsz_sf` and `sg_sf` do not have proper crs information.\n\n> DIY: Using the method you learned in Lesson 2, assign the correct crs to mpsz_sf and sg_sf simple feature data frames.\n\n> DIY: If necessary, changing the referencing system to Singapore national projected coordinate system.\n\n### Mapping the geospatial data sets\n\nAfter checking the referencing system of each geospatial data data frame, it is also useful for us to plot a map to show their spatial patterns.\n\n> DIY: Using the mapping methods you learned in Hands-on Exercise 3, prepare a map as shown below.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](chap05_files/figure-pdf/unnamed-chunk-4-1.pdf)\n:::\n:::\n\n\n\nNotice that all the geospatial layers are within the same map extend. This shows that their referencing system and coordinate values are referred to similar spatial context. This is very important in any geospatial analysis.\n\nAlternatively, we can also prepare a pin map by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('view')\ntm_shape(childcare_sf)+\n  tm_dots()\n```\n\n::: {.cell-output-display}\n![](chap05_files/figure-pdf/unnamed-chunk-5-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\ntmap_mode('plot')\n```\n:::\n\n\n\nNotice that at the interactive mode, **tmap** is using [**leaflet for R**](https://rstudio.github.io/leaflet/) API. The advantage of this interactive pin map is it allows us to navigate and zoom around the map freely. We can also query the information of each simple feature (i.e. the point) by clicking of them. Last but not least, you can also change the background of the internet map layer. Currently, three internet map layers are provided. They are: ESRI.WorldGrayCanvas, OpenStreetMap, and ESRI.WorldTopoMap. The default is ESRI.WorldGrayCanvas.\n\n> Reminder: Always remember to switch back to plot mode after the interactive map. This is because, each interactive mode will consume a connection. You should also avoid displaying ecessive numbers of interactive maps (i.e. not more than 10) in one RMarkdown document when publish on Netlify.\n\n## Geospatial Data wrangling\n\nAlthough simple feature data frame is gaining popularity again sp's Spatial\\* classes, there are, however, many geospatial analysis packages require the input geospatial data in sp's Spatial\\* classes. In this section, you will learn how to convert simple feature data frame to sp's Spatial\\* class.\n\n### Converting from sf format into spatstat's ppp format\n\nNow, we will use *as.ppp()* function of **spatstat** to convert the spatial data into **spatstat**'s ***ppp*** object format.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare_ppp <- as.ppp(childcare_sf)\nchildcare_ppp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern: 1545 points\nmarks are of storage type  'character'\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n```\n\n\n:::\n:::\n\n\n\nNow, let us plot ***childcare_ppp*** and examine the different.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(childcare_ppp)\n```\n\n::: {.cell-output-display}\n![](chap05_files/figure-pdf/unnamed-chunk-7-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nYou can take a quick look at the summary statistics of the newly created ppp object by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(childcare_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1545 character character \n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n```\n\n\n:::\n:::\n\n\n\nNotice the warning message about duplicates. In spatial point patterns analysis an issue of significant is the presence of duplicates. The statistical methodology used for spatial point patterns processes is based largely on the assumption that process are *simple*, that is, that the points cannot be coincident.\n\n### Handling duplicated points\n\nWe can check the duplication in a ***ppp*** object by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany(duplicated(childcare_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\nTo count the number of co-indicence point, we will use the *multiplicity()* function as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmultiplicity(childcare_ppp)\n```\n:::\n\n\n\nIf we want to know how many locations have more than one point event, we can use the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(multiplicity(childcare_ppp) > 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\n\nThe output shows that there are 128 duplicated point events.\n\nTo view the locations of these duplicate point events, we will plot `childcare` data by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('view')\ntm_shape(childcare_sf) +\n  tm_dots(alpha=0.4, \n          size=0.05)\n```\n\n::: {.cell-output-display}\n![](chap05_files/figure-pdf/unnamed-chunk-12-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\ntmap_mode('plot')\n```\n:::\n\n\n\n> Challenge: Do you know how to spot the duplicate points from the map shown above?\n\nThere are three ways to overcome this problem. The easiest way is to delete the duplicates. But, that will also mean that some useful point events will be lost.\n\nThe second solution is use *jittering*, which will add a small perturbation to the duplicate points so that they do not occupy the exact same space.\n\nThe third solution is to make each point \"unique\" and then attach the duplicates of the points to the patterns as **marks**, as attributes of the points. Then you would need analytical techniques that take into account these marks.\n\nThe code chunk below implements the jittering approach.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare_ppp_jit <- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n```\n:::\n\n\n\n> DIY: Using the method you learned in previous section, check if any dusplicated point in this geospatial data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany(duplicated(childcare_ppp_jit))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n### Creating ***owin*** object\n\nWhen analysing spatial point patterns, it is a good practice to confine the analysis with a geographical area like Singapore boundary. In **spatstat**, an object called ***owin*** is specially designed to represent this polygonal region.\n\nThe code chunk below is used to covert *sg* SpatialPolygon object into owin object of **spatstat**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsg_owin <- as.owin(sg_sf)\n```\n:::\n\n\n\nThe ouput object can be displayed by using *plot()* function\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(sg_owin)\n```\n\n::: {.cell-output-display}\n![](chap05_files/figure-pdf/unnamed-chunk-16-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nand *summary()* function of Base R.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(sg_owin)\n```\n:::\n\n\n\n### Combining point events object and owin object\n\nIn this last step of geospatial data wrangling, we will extract childcare events that are located within Singapore by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcareSG_ppp = childcare_ppp[sg_owin]\n```\n:::\n\n\n\nThe output object combined both the point and polygon feature in one ppp object class as shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(childcareSG_ppp)\n```\n:::\n\n\n\n> DIY: Using the method you learned in previous exercise, plot the newly derived childcareSG_ppp as shown below.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](chap05_files/figure-pdf/unnamed-chunk-20-1.pdf)\n:::\n:::\n\n\n\n#### Extracting study area\n\nThe code chunk below will be used to extract the target planning areas.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npg <- mpsz_sf %>%\n  filter(PLN_AREA_N == \"PUNGGOL\")\ntm <- mpsz_sf %>%\n  filter(PLN_AREA_N == \"TAMPINES\")\nck <- mpsz_sf %>%\n  filter(PLN_AREA_N == \"CHOA CHU KANG\")\njw <- mpsz_sf %>%\n  filter(PLN_AREA_N == \"JURONG WEST\")\n```\n:::\n\n\n\nPlotting target planning areas\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(2,2))\nplot(pg, main = \"Ponggol\")\n```\n\n::: {.cell-output-display}\n![](chap05_files/figure-pdf/unnamed-chunk-22-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\nplot(tm, main = \"Tampines\")\n```\n\n::: {.cell-output-display}\n![](chap05_files/figure-pdf/unnamed-chunk-22-2.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\nplot(ck, main = \"Choa Chu Kang\")\n```\n\n::: {.cell-output-display}\n![](chap05_files/figure-pdf/unnamed-chunk-22-3.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\nplot(jw, main = \"Jurong West\")\n```\n\n::: {.cell-output-display}\n![](chap05_files/figure-pdf/unnamed-chunk-22-4.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n#### Converting sf objects into ***owin*** objects\n\nNow, we will convert these sf objects into owin objects that is required by **spatstat**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npg_owin = as.owin(pg)\ntm_owin = as.owin(tm)\nck_owin = as.owin(ck)\njw_owin = as.owin(jw)\n```\n:::\n\n\n\n#### Combining childcare points and the study area\n\nBy using the code chunk below, we are able to extract childcare that is within the specific region to do our analysis later on.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n```\n:::\n\n\n\nNext, *rescale()* function is used to trasnform the unit of measurement from metre to kilometre.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, \"km\")\n```\n:::\n\n\n\nThe code chunk below is used to plot these four study areas and the locations of the childcare centres.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n```\n\n::: {.cell-output-display}\n![](chap05_files/figure-pdf/unnamed-chunk-26-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Second-order Spatial Point Patterns Analysis\n\n## Analysing Spatial Point Process Using G-Function\n\nThe G function measures the distribution of the distances from an arbitrary event to its nearest event. In this section, you will learn how to compute G-function estimation by using [*Gest()*](https://rdrr.io/cran/spatstat/man/Gest.html) of **spatstat** package. You will also learn how to perform monta carlo simulation test using [*envelope()*](https://rdrr.io/cran/spatstat/man/envelope.html) of **spatstat** package.\n\n### Choa Chu Kang planning area\n\n#### Computing G-function estimation\n\nThe code chunk below is used to compute G-function using *Gest()* of **spatat** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nG_CK = Gest(childcare_ck_ppp, correction = \"border\")\nplot(G_CK, xlim=c(0,500))\n```\n\n::: {.cell-output-display}\n![](chap05_files/figure-pdf/unnamed-chunk-27-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n#### Performing Complete Spatial Randomness Test\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\n\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\n\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\n\nMonte Carlo test with G-fucntion\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nG_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(G_CK.csr)\n```\n\n::: {.cell-output-display}\n![](chap05_files/figure-pdf/unnamed-chunk-28-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Tampines planning area\n\n#### Computing G-function estimation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nG_tm = Gest(childcare_tm_ppp, correction = \"best\")\nplot(G_tm)\n```\n\n::: {.cell-output-display}\n![](chap05_files/figure-pdf/unnamed-chunk-29-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n#### Performing Complete Spatial Randomness Test\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of childcare services at Tampines are randomly distributed.\n\nH1= The distribution of childcare services at Tampines are not randomly distributed.\n\nThe null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.\n\nThe code chunk below is used to perform the hypothesis testing.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nG_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = \"all\", nsim = 999)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(G_tm.csr)\n```\n\n::: {.cell-output-display}\n![](chap05_files/figure-pdf/unnamed-chunk-30-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Analysing Spatial Point Process Using F-Function\n\nThe F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape. In this section, you will learn how to compute F-function estimation by using [*Fest()*](https://rdrr.io/cran/spatstat/man/Fest.html) of **spatstat** package. You will also learn how to perform monta carlo simulation test using [*envelope()*](https://rdrr.io/cran/spatstat/man/envelope.html) of **spatstat** package.\n\n### Choa Chu Kang planning area\n\n#### Computing F-function estimation\n\nThe code chunk below is used to compute F-function using *Fest()* of **spatat** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nF_CK = Fest(childcare_ck_ppp)\nplot(F_CK)\n```\n\n::: {.cell-output-display}\n![](chap05_files/figure-pdf/unnamed-chunk-31-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Performing Complete Spatial Randomness Test\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\n\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\n\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\n\nMonte Carlo test with F-fucntion\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nF_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(F_CK.csr)\n```\n\n::: {.cell-output-display}\n![](chap05_files/figure-pdf/unnamed-chunk-32-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Tampines planning area\n\n#### Computing F-function estimation\n\nMonte Carlo test with F-fucntion\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nF_tm = Fest(childcare_tm_ppp, correction = \"best\")\nplot(F_tm)\n```\n\n::: {.cell-output-display}\n![](chap05_files/figure-pdf/unnamed-chunk-33-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n#### Performing Complete Spatial Randomness Test\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of childcare services at Tampines are randomly distributed.\n\nH1= The distribution of childcare services at Tampines are not randomly distributed.\n\nThe null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.\n\nThe code chunk below is used to perform the hypothesis testing.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nF_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = \"all\", nsim = 999)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(F_tm.csr)\n```\n\n::: {.cell-output-display}\n![](chap05_files/figure-pdf/unnamed-chunk-34-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Analysing Spatial Point Process Using K-Function\n\nK-function measures the number of events found up to a given distance of any particular event. In this section, you will learn how to compute K-function estimates by using [*Kest()*](https://rdrr.io/cran/spatstat/man/Kest.html) of **spatstat** package. You will also learn how to perform monta carlo simulation test using *envelope()* of spatstat package.\n\n### Choa Chu Kang planning area\n\n#### Computing K-fucntion estimate\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nK_ck = Kest(childcare_ck_ppp, correction = \"Ripley\")\nplot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n```\n\n::: {.cell-output-display}\n![](chap05_files/figure-pdf/unnamed-chunk-35-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n#### Performing Complete Spatial Randomness Test\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\n\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\n\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\n\nThe code chunk below is used to perform the hypothesis testing.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nK_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(K_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")\n```\n\n::: {.cell-output-display}\n![](chap05_files/figure-pdf/unnamed-chunk-37-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Tampines planning area\n\n#### Computing K-fucntion estimation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nK_tm = Kest(childcare_tm_ppp, correction = \"Ripley\")\nplot(K_tm, . -r ~ r, \n     ylab= \"K(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n```\n\n::: {.cell-output-display}\n![](chap05_files/figure-pdf/unnamed-chunk-38-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n#### Performing Complete Spatial Randomness Test\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of childcare services at Tampines are randomly distributed.\n\nH1= The distribution of childcare services at Tampines are not randomly distributed.\n\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\n\nThe code chunk below is used to perform the hypothesis testing.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nK_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(K_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"K(d)-r\", xlim=c(0,500))\n```\n\n::: {.cell-output-display}\n![](chap05_files/figure-pdf/unnamed-chunk-40-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Analysing Spatial Point Process Using L-Function\n\nIn this section, you will learn how to compute L-function estimation by using [*Lest()*](https://rdrr.io/cran/spatstat/man/Lest.html) of **spatstat** package. You will also learn how to perform monta carlo simulation test using *envelope()* of spatstat package.\n\n### Choa Chu Kang planning area\n\n#### Computing L Fucntion estimation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL_ck = Lest(childcare_ck_ppp, correction = \"Ripley\")\nplot(L_ck, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n```\n\n::: {.cell-output-display}\n![](chap05_files/figure-pdf/unnamed-chunk-41-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n#### Performing Complete Spatial Randomness Test\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\n\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\n\nThe null hypothesis will be rejected if p-value if smaller than alpha value of 0.001.\n\nThe code chunk below is used to perform the hypothesis testing.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(L_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n```\n\n::: {.cell-output-display}\n![](chap05_files/figure-pdf/unnamed-chunk-43-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Tampines planning area\n\n#### Computing L-fucntion estimate\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL_tm = Lest(childcare_tm_ppp, correction = \"Ripley\")\nplot(L_tm, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n```\n\n::: {.cell-output-display}\n![](chap05_files/figure-pdf/unnamed-chunk-44-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n#### Performing Complete Spatial Randomness Test\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of childcare services at Tampines are randomly distributed.\n\nH1= The distribution of childcare services at Tampines are not randomly distributed.\n\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\n\nThe code chunk below will be used to perform the hypothesis testing.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n```\n\n\n:::\n:::\n\n\n\nThen, plot the model output by using the code chun below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(L_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"L(d)-r\", xlim=c(0,500))\n```\n\n::: {.cell-output-display}\n![](chap05_files/figure-pdf/unnamed-chunk-46-1.pdf){fig-pos='H'}\n:::\n:::\n",
    "supporting": [
      "chap05_files\\figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}